package com.aspire.guidewire.pc.testscripts;

import org.openqa.selenium.WebDriver;
import org.testng.ITestContext;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Test;

import com.aspire.guidewire.pc.teststeps.homeowners.DataFakers;
import com.aspire.guidewire.pc.teststeps.homeowners.HomeOwnersConstants;
import com.aspire.guidewire.pc.teststeps.homeowners.HomeOwnersConstants.InsuredType;
import com.aspire.guidewire.pc.teststeps.homeowners.HomeOwnersConstants.InterestType;
import com.aspire.guidewire.pc.teststeps.homeowners.HomeOwnersConstants.ProductNames;
import com.aspire.guidewire.pc.teststeps.homeowners.HomeOwnersConstants.RiskAnalysisType;
import com.aspire.guidewire.pc.teststeps.homeowners.HomeOwnersConstants.Transactions;
import com.aspire.guidewire.pc.teststeps.homeowners.HomeOwnersDataEngine;
import com.aspire.guidewire.pc.teststeps.homeowners.HomeOwnersFeatures.AdditionalInterestFromPerson;
import com.aspire.guidewire.pc.teststeps.homeowners.HomeOwnersFeatures.CancellationSource;
import com.aspire.guidewire.pc.teststeps.homeowners.HomeOwnersFeatures.CloseOptions;
import com.aspire.guidewire.pc.teststeps.homeowners.HomeOwnersFeatures.Coverages;
import com.aspire.guidewire.pc.teststeps.homeowners.HomeOwnersFeatures.CreateEmail;
import com.aspire.guidewire.pc.teststeps.homeowners.HomeOwnersFeatures.CreateNewAccountFromPerson;
import com.aspire.guidewire.pc.teststeps.homeowners.HomeOwnersFeatures.DwellingConstruction;
import com.aspire.guidewire.pc.teststeps.homeowners.HomeOwnersFeatures.DwellingDetails;
import com.aspire.guidewire.pc.teststeps.homeowners.HomeOwnersFeatures.EnterAccountInformation;
import com.aspire.guidewire.pc.teststeps.homeowners.HomeOwnersFeatures.HistoryDetails;
import com.aspire.guidewire.pc.teststeps.homeowners.HomeOwnersFeatures.Payments;
import com.aspire.guidewire.pc.teststeps.homeowners.HomeOwnersFeatures.PolicyChange;
import com.aspire.guidewire.pc.teststeps.homeowners.HomeOwnersFeatures.PolicyDetails;
import com.aspire.guidewire.pc.teststeps.homeowners.HomeOwnersFeatures.PolicyInfo;
import com.aspire.guidewire.pc.teststeps.homeowners.HomeOwnersFeatures.PolicyReview;
import com.aspire.guidewire.pc.teststeps.homeowners.HomeOwnersFeatures.PreRenewalDirection;
import com.aspire.guidewire.pc.teststeps.homeowners.HomeOwnersFeatures.Qualification;
import com.aspire.guidewire.pc.teststeps.homeowners.HomeOwnersFeatures.Quote;
import com.aspire.guidewire.pc.teststeps.homeowners.HomeOwnersFeatures.Rating;
import com.aspire.guidewire.pc.teststeps.homeowners.HomeOwnersFeatures.ReinstatementReason;
import com.aspire.guidewire.pc.teststeps.homeowners.HomeOwnersFeatures.RenewPolicy;
import com.aspire.guidewire.pc.teststeps.homeowners.HomeOwnersFeatures.RiskAnalysis;
import com.aspire.guidewire.pc.teststeps.homeowners.HomeOwnersFeatures.UWIssueType;
import com.aspire.guidewire.pc.teststeps.homeowners.HomeOwnersSteps;
import com.aspire.guidewire.pc.teststeps.homeowners.HomeOwnersStepsImpl;
import com.aspire.guidewire.utils.DataProviderUtils;
import com.aspire.guidewire.utils.EnvironmentPropertiesReader;
import com.aspire.guidewire.utils.Log;
import com.aspire.guidewire.webdriverManager.DriverManager;

public class PC_HomeOwnersSuite {

	boolean LambdatestStatus = false;

	private static EnvironmentPropertiesReader configProperty = EnvironmentPropertiesReader.getInstance();

	String pCWebSite, browser, contentGraphqlURL, browseAllContentGraphqlURL, sheetName;

	protected static ThreadLocal<WebDriver> threadLocalDriver = new ThreadLocal<>();

	@BeforeTest(alwaysRun = true)  

	public void init(ITestContext context) {

		pCWebSite = (System.getProperty("pCWebSite") != null ? System.getProperty("pCWebSite"): context.getCurrentXmlTest().getParameter("pCWebSite"));
		DriverManager.setPCWebsite(pCWebSite);

		if(configProperty.hasProperty("runLambdaTestFromLocal") && configProperty.getProperty("runLambdaTestFromLocal").trim().equalsIgnoreCase("true")){
			LambdatestStatus = true;
		}
	}

	/**
	 * @author charu.anbarasan
	 * @param browser
	 * @throws Exception
	 */
	@Test(description="Verify the copy submission transaction for Homeowners - Dwelling policy", dataProviderClass = DataProviderUtils.class, dataProvider = "parallelTestDataProvider")
	public void TC60(String browser) throws Exception {

		DriverManager.setDriver(browser);
		WebDriver driver = DriverManager.getDriver();
		Log.testCaseInfo("Verify the copy submission transaction for Homeowners - Dwelling policy",driver);
		HomeOwnersDataEngine testData = new HomeOwnersDataEngine("GWTestData_DataEngine.xlsx", "Homeowners", "TC60");

		try {	

			HomeOwnersStepsImpl pc = HomeOwnersSteps.create();

			pc.loginIntoTheApplication("su", "gw");

			//Get policy number from Excel sheet which is generated by data generator using auto generated policy number created copy submission 

			pc.searchPolicyNumber(PolicyDetails.builder().policyNumber(testData.getPolicyNumber()).build());

			pc.copySubmission();

			pc.selectQualifications(Qualification.builder().build());

			pc.updatePolicyInfo(PolicyInfo.builder()
					.build());

			pc.addDwellingDetails(DwellingDetails.builder().build());

			pc.addDwellingConstructionDetails(DwellingConstruction.builder().build());

			pc.addCoverages(Coverages.builder(HomeOwnersConstants.PolicyType.NONE)
					.build());

			pc.addModifiersDetails();	

			pc.selectRiskAnalysis(RiskAnalysis.builder(RiskAnalysisType.NONE).build());
			pc.reviewPolicy(PolicyReview.builder(HomeOwnersConstants.PolicyReviewType.NONE).build());
			pc.viewQuote(Quote.builder().build());
			pc.viewForms(Quote.builder().build());
			pc.selectPayments(Payments.builder().build());
			pc.issuepolicy(HomeOwnersConstants.Transactions.SUBMISSION);
			pc.viewPolicy();

			Log.testCaseResult(driver);

		} catch (Exception e) {
			Log.exception(e, DriverManager.getDriver());
		} finally {
			DriverManager.quitDriver(driver);
			Log.endTestCase();
		}
	}

	/**
	 * @author surendar.baskaran
	 * @param browser
	 * @throws Exception
	 */
	@Test(description = "To verify whether user able to Quote and Issue the Reinstate Transaction for Homeowners Policy successfully", dataProviderClass = DataProviderUtils.class, dataProvider = "parallelTestDataProvider")
	public void TC55(String browser) throws Exception {

		DriverManager.setDriver(browser);
		WebDriver driver = DriverManager.getDriver();
		Log.testCaseInfo("To verify whether user able to Quote and Issue the Reinstate Transaction for Homeowners Policy successfully",driver);
		HomeOwnersDataEngine testData = new HomeOwnersDataEngine("GWTestData_DataEngine.xlsx", "HomeOwners", "TC55");

		try {	

			HomeOwnersStepsImpl pc = HomeOwnersSteps.create();

			pc.loginIntoTheApplication("su", "gw");

			//Get policy number from Excel sheet which is generated by data generator using auto generated policy number created copy submission 

			pc.searchPolicyNumber(PolicyDetails.builder().policyNumber(testData.getPolicyNumber()).build());

			pc.copySubmissions();

			pc.viewPolicy();

			pc.cancelPolicy(CancellationSource.builder().source(testData.getSource())
					.reason(testData.getReason()).build());
			pc.viewPolicy();

			pc.reinstatePolicy(ReinstatementReason.builder().reason(testData.getReinstateReason()).build());
			pc.viewPolicy();

			Log.testCaseResult(driver);

		} catch (Exception e) {
			Log.exception(e, DriverManager.getDriver());
		} finally {
			DriverManager.quitDriver(driver);
			Log.endTestCase();
		}
	}

	/**
	 * @author surendar.baskaran
	 * @param browser
	 * @throws Exception
	 */
	@Test(description = "Verify user able to Cancel a homeowners policy using pro rata cancellation method.", dataProviderClass = DataProviderUtils.class, dataProvider = "parallelTestDataProvider")
	public void TC53(String browser) throws Exception {

		DriverManager.setDriver(browser);
		WebDriver driver = DriverManager.getDriver();
		Log.testCaseInfo("Verify user able to Cancel a homeowners policy using pro rata cancellation method.",driver);
		HomeOwnersDataEngine testData = new HomeOwnersDataEngine("GWTestData_DataEngine.xlsx", "HomeOwners", "TC53");

		try {	

			HomeOwnersStepsImpl pc = HomeOwnersSteps.create();

			pc.loginIntoTheApplication("su", "gw");

			//Get policy number from Excel sheet which is generated by data generator using auto generated policy number created copy submission 

			pc.searchPolicyNumber(PolicyDetails.builder().policyNumber(testData.getPolicyNumber()).build());

			pc.copySubmissions();

			pc.viewPolicy();

			pc.cancelPolicy(CancellationSource.builder().source(testData.getSource())
					.reason(testData.getReason()).build());
			pc.viewPolicy();

			Log.testCaseResult(driver);

		} catch (Exception e) {
			Log.exception(e, DriverManager.getDriver());
		}  finally {
			DriverManager.quitDriver(driver);
			Log.endTestCase();		
		}
	}

	/**
	 * @author surendar.baskaran
	 * @param browser
	 * @throws Exception
	 */
	@Test(description = "To Verify whether User can able to Quote and Issue the  Policy Change Transaction - Homeowners", dataProviderClass = DataProviderUtils.class, dataProvider = "parallelTestDataProvider")
	public void TC52(String browser) throws Exception {

		DriverManager.setDriver(browser);
		WebDriver driver = DriverManager.getDriver();
		Log.testCaseInfo("To Verify whether User can able to Quote and Issue the  Policy Change Transaction - Homeowners",driver);
		HomeOwnersDataEngine testData = new HomeOwnersDataEngine("GWTestData_DataEngine.xlsx", "HomeOwners", "TC52");

		try {	

			HomeOwnersStepsImpl pc = HomeOwnersSteps.create();

			pc.loginIntoTheApplication("su", "gw");

			//Get policy number from Excel sheet which is generated by data generator using auto generated policy number created copy submission 

			pc.searchPolicyNumber(PolicyDetails.builder().policyNumber(testData.getPolicyNumber()).build());

			pc.copySubmissions();

			pc.viewPolicy();

			pc.policyChange(PolicyChange.builder().date(testData.getDateOneMonthAhead()).build());

			pc.updatePolicyInfo(PolicyInfo.builder()
					.build());

			pc.addDwellingDetails(DwellingDetails.builder().fireProtection(testData.getFireProtection2()).build());

			pc.addDwellingConstructionDetails(DwellingConstruction.builder()
					.build());
			pc.addCoverages(Coverages.builder(HomeOwnersConstants.PolicyType.NONE).build());
			pc.addModifiersDetails();
			pc.selectRiskAnalysis(RiskAnalysis.builder(RiskAnalysisType.NONE).build());
			pc.reviewPolicy(PolicyReview.builder(HomeOwnersConstants.PolicyReviewType.NONE).build());
			pc.viewQuote(Quote.builder().build());
			pc.viewForms(Quote.builder().build());
			pc.selectPayments(Payments.builder().build());
			pc.issuepolicy(HomeOwnersConstants.Transactions.POLICY_CHANGE);
			pc.viewPolicy();

			Log.testCaseResult(driver);

		} catch (Exception e) {
			Log.exception(e, DriverManager.getDriver());
		}  finally {
			DriverManager.quitDriver(driver);
			Log.endTestCase();
		}
	}

	/**
	 * @author surendar.baskaran
	 * @param browser
	 * @throws Exception
	 */
	@Test( description = "To verify whether user able to process Not-Taken option on submission for Homeowners - Dwelling policy successfully", dataProviderClass = DataProviderUtils.class, dataProvider = "parallelTestDataProvider")
	public void TC61(String browser) throws Exception {

		DriverManager.setDriver(browser);
		WebDriver driver = DriverManager.getDriver();
		Log.testCaseInfo("To verify whether user able to process Not-Taken option on submission for Homeowners - Dwelling policy successfully",driver);
		HomeOwnersDataEngine testData = new HomeOwnersDataEngine("GWTestData_DataEngine.xlsx", "HomeOwners", "TC61");

		try {	

			HomeOwnersStepsImpl pc = HomeOwnersSteps.create();

			pc.loginIntoTheApplication("su", "gw");

			pc.searchAccount(EnterAccountInformation.builder()
					.firstName(testData.getFirstName())
					.lastName(testData.getLastName()).build());

			pc.createAccount(CreateNewAccountFromPerson.builder()
					.firstName(testData.getFirstName())
					.lastName(testData.getLastName())
					.addressLine1(testData.getAddressLine1())
					.state(testData.getState())
					.city(testData.getCity())
					.zipCode(testData.getZipcode())
					.addressType(testData.getAddressType())
					.organization(testData.getProducerOrganization())
					.build());

			pc.selectProduct(ProductNames.HOME_OWNERS);

			pc.selectQualifications(Qualification.builder()

					.policyType(testData.getPolicyType())
					.coverageForm(testData.getCoverageForm())
					.dwellingOccupied(testData.getDwellingOccupied())
					.occupyDwellingFullTime(testData.getDwellingFullTime())
					.build());

			pc.updatePolicyInfo(PolicyInfo.builder()
					.policyEffectiveDate(testData.getCurrentDate())
					.policyTerm(testData.getPolicyTerm())
					.build());

			pc.addDwellingDetails(DwellingDetails.builder().fireProtection(testData.getFireProtection()).build());

			pc.addDwellingConstructionDetails(DwellingConstruction.builder()
					.year(testData.getCurrentYear()).build());

			pc.addCoverages(Coverages.builder(HomeOwnersConstants.PolicyType.DWELLING)
					.coinsurance(testData.getCoInsurance())
					.prohibitedUse(testData.getProhibitedUse())
					.lossOfRentalIncome(testData.getRentalIncome())
					.build());

			pc.addModifiersDetails();

			pc.selectRiskAnalysis(RiskAnalysis.builder(RiskAnalysisType.NONE).build());
			pc.reviewPolicy(PolicyReview.builder(HomeOwnersConstants.PolicyReviewType.NONE).build());
			pc.viewQuote(Quote.builder().build());
			pc.viewForms(Quote.builder().build());
			pc.policyCloseOptions(CloseOptions.builder(HomeOwnersConstants.CloseOptionType.NOT_TAKEN)
					.reasonNotTaken(testData.getReasonNotTaken())
					.build());

			Log.testCaseResult(driver);

		} catch (Exception e) {
			Log.exception(e, DriverManager.getDriver());
		}  finally {
			DriverManager.quitDriver(driver);
			Log.endTestCase();
		}
	}

	/**
	 * @author surendar.baskaran
	 * @param browser
	 * @throws Exception
	 */
	@Test(description = "Verify whether user able to Quote and Issue the Homeowners - Condominium Policy with term type as 6 months", dataProviderClass = DataProviderUtils.class, dataProvider = "parallelTestDataProvider")
	public void TC90(String browser) throws Exception {

		DriverManager.setDriver(browser);
		WebDriver driver = DriverManager.getDriver();
		Log.testCaseInfo("Verify whether user able to Quote and Issue the Homeowners - Condominium Policy with term type as 6 months",driver);
		HomeOwnersDataEngine testData = new HomeOwnersDataEngine("GWTestData_DataEngine.xlsx", "HomeOwners", "TC90");

		try {	

			HomeOwnersStepsImpl pc = HomeOwnersSteps.create();

			pc.loginIntoTheApplication("su", "gw");

			pc.searchAccount(EnterAccountInformation.builder()
					.firstName(testData.getFirstName())
					.lastName(testData.getLastName()).build());

			pc.createAccount(CreateNewAccountFromPerson.builder()
					.firstName(testData.getFirstName())
					.lastName(testData.getLastName())
					.addressLine1(testData.getAddressLine1())
					.state(testData.getState())
					.city(testData.getCity())
					.zipCode(testData.getZipcode())
					.addressType(testData.getAddressType())
					.organization(testData.getProducerOrganization())
					.build());

			pc.selectProduct(ProductNames.HOME_OWNERS);

			pc.selectQualifications(Qualification.builder()

					.policyType(testData.getPolicyType())
					.coverageForm(testData.getCoverageForm())
					.dwellingOccupied(testData.getDwellingOccupied())
					.occupyDwellingFullTime(testData.getDwellingFullTime())
					.build());


			pc.updatePolicyInfo(PolicyInfo.builder()
					.policyEffectiveDate(testData.getCurrentDate())
					.policyTerm(testData.getPolicyTerm())
					.policyExpirationDate(testData.getDateSixMonthAhead())
					.build());

			pc.addDwellingDetails(DwellingDetails.builder().fireProtection(testData.getFireProtection()).build());

			pc.addDwellingConstructionDetails(DwellingConstruction.builder()
					.year(testData.getCurrentYear()).build());

			pc.addCoverages(Coverages.builder(HomeOwnersConstants.PolicyType.CONDOMINIUM)
					.coinsurance(testData.getCoInsurance())
					.covCLimit(testData.getCovCLimit())
					.valuationMethod(testData.getValuationMethod())
					.prohibitedUse(testData.getProhibitedUse())
					.lossOfRentalIncome(testData.getRentalIncome())
					.build());

			pc.addModifiersDetails();
			pc.selectRiskAnalysis(RiskAnalysis.builder(RiskAnalysisType.NONE).build());
			pc.reviewPolicy(PolicyReview.builder(HomeOwnersConstants.PolicyReviewType.NONE).build());
			pc.viewQuote(Quote.builder().build());
			pc.viewForms(Quote.builder().build());
			pc.issuepolicy(HomeOwnersConstants.Transactions.SUBMISSION);

			Log.testCaseResult(driver);

		} catch (Exception e) {
			Log.exception(e, DriverManager.getDriver());
		}  finally {
			DriverManager.quitDriver(driver);
			Log.endTestCase();
		}
	}

	/**
	 * @author charu.anbarasan
	 * @param browser
	 * @throws Exception
	 */
	@Test(description="Verify whether User able to Quote and Issue the  Homeowners  with term type as Annual/12 months", dataProviderClass = DataProviderUtils.class, dataProvider = "parallelTestDataProvider")
	public void TC66(String browser) throws Exception {

		DriverManager.setDriver(browser);
		WebDriver driver = DriverManager.getDriver();
		Log.testCaseInfo("Verify whether User able to Quote and Issue the  Homeowners  with term type as Annual/12 months",driver);
		HomeOwnersDataEngine testData = new HomeOwnersDataEngine("GWTestData_DataEngine.xlsx", "HomeOwners", "TC66");

		try {	

			HomeOwnersStepsImpl pc = HomeOwnersSteps.create();

			pc.loginIntoTheApplication("su", "gw");

			pc.searchAccount(EnterAccountInformation.builder()
					.firstName(testData.getFirstName())
					.lastName(testData.getLastName()).build());

			pc.createAccount(CreateNewAccountFromPerson.builder()
					.firstName(testData.getFirstName())
					.lastName(testData.getLastName())
					.addressLine1(testData.getAddressLine1())
					.state(testData.getState())
					.city(testData.getCity())
					.zipCode(testData.getZipcode())
					.addressType(testData.getAddressType())
					.organization(testData.getProducerOrganization())
					.build());

			pc.selectProduct(ProductNames.HOME_OWNERS);

			pc.selectQualifications(Qualification.builder()

					.policyType(testData.getPolicyType())
					.coverageForm(testData.getCoverageForm())
					.dwellingOccupied(testData.getDwellingOccupied())
					.occupyDwellingFullTime(testData.getDwellingFullTime())
					.build());

			pc.updatePolicyInfo(PolicyInfo.builder()
					.policyEffectiveDate(testData.getCurrentDate())
					.policyTerm(testData.getPolicyTerm())
					.build());

			pc.addDwellingDetails(DwellingDetails.builder().fireProtection(testData.getFireProtection()).build());

			pc.addDwellingConstructionDetails(DwellingConstruction.builder()
					.year(testData.getCurrentYear()).build());

			pc.addCoverages(Coverages.builder(HomeOwnersConstants.PolicyType.DWELLING)
					.coinsurance(testData.getCoInsurance())
					.prohibitedUse(testData.getProhibitedUse())
					.lossOfRentalIncome(testData.getRentalIncome())
					.build());

			pc.addModifiersDetails();

			pc.selectRiskAnalysis(RiskAnalysis.builder(RiskAnalysisType.NONE).build());
			pc.reviewPolicy(PolicyReview.builder(HomeOwnersConstants.PolicyReviewType.NONE).build());
			pc.viewQuote(Quote.builder().build());
			pc.viewForms(Quote.builder().build());
			pc.selectPayments(Payments.builder().build());
			pc.issuepolicy(HomeOwnersConstants.Transactions.SUBMISSION);
			pc.viewPolicy();

			Log.testCaseResult(driver);

		} catch (Exception e) {
			Log.exception(e, DriverManager.getDriver());
		}  finally {
			DriverManager.quitDriver(driver);
			Log.endTestCase();
		}
	}
	/**
	 * @author charu.anbarasan
	 * @param browser
	 * @throws Exception
	 */
	@Test(description="Verify whether User able to Quote and Issue the Homeowners - Dwelling Policy with term type as 6 months", dataProviderClass = DataProviderUtils.class, dataProvider = "parallelTestDataProvider")
	public void TC67(String browser) throws Exception {

		DriverManager.setDriver(browser);
		WebDriver driver = DriverManager.getDriver();
		Log.testCaseInfo("Verify whether User able to Quote and Issue the Homeowners - Dwelling Policy with term type as 6 months",driver);
		HomeOwnersDataEngine testData = new HomeOwnersDataEngine("GWTestData_DataEngine.xlsx", "HomeOwners", "TC67");

		try {	

			HomeOwnersStepsImpl pc = HomeOwnersSteps.create();

			pc.loginIntoTheApplication("su", "gw");

			pc.searchAccount(EnterAccountInformation.builder()
					.firstName(testData.getFirstName())
					.lastName(testData.getLastName()).build());

			pc.createAccount(CreateNewAccountFromPerson.builder()
					.firstName(testData.getFirstName())
					.lastName(testData.getLastName())
					.addressLine1(testData.getAddressLine1())
					.state(testData.getState())
					.city(testData.getCity())
					.zipCode(testData.getZipcode())
					.addressType(testData.getAddressType())
					.organization(testData.getProducerOrganization())
					.build());

			pc.selectProduct(ProductNames.HOME_OWNERS);

			pc.selectQualifications(Qualification.builder()

					.policyType(testData.getPolicyType())
					.coverageForm(testData.getCoverageForm())
					.dwellingOccupied(testData.getDwellingOccupied())
					.occupyDwellingFullTime(testData.getDwellingFullTime())
					.build());


			pc.updatePolicyInfo(PolicyInfo.builder()
					.policyTerm(testData.getPolicyTerm())
					.policyExpirationDate(testData.getDateSixMonthAhead())
					.build());

			pc.addDwellingDetails(DwellingDetails.builder().fireProtection(testData.getFireProtection()).build());

			pc.addDwellingConstructionDetails(DwellingConstruction.builder()
					.year(testData.getCurrentYear()).build());

			pc.addCoverages(Coverages.builder(HomeOwnersConstants.PolicyType.DWELLING)
					.coinsurance(testData.getCoInsurance())
					.prohibitedUse(testData.getProhibitedUse())
					.lossOfRentalIncome(testData.getRentalIncome())
					.build());
			pc.addModifiersDetails();

			pc.selectRiskAnalysis(RiskAnalysis.builder(RiskAnalysisType.NONE).build());
			pc.reviewPolicy(PolicyReview.builder(HomeOwnersConstants.PolicyReviewType.NONE).build());
			pc.viewQuote(Quote.builder().build());
			pc.viewForms(Quote.builder().build());
			pc.selectPayments(Payments.builder().build());
			pc.issuepolicy(HomeOwnersConstants.Transactions.SUBMISSION);
			pc.viewPolicy();

			Log.testCaseResult(driver);

		} catch (Exception e) {
			Log.exception(e, DriverManager.getDriver());
		}  finally {

			DriverManager.quitDriver(driver);
			Log.endTestCase();
		}
	}

	/**
	 * @author charu.anbarasan
	 * @param browser
	 * @throws Exception
	 */
	@Test(description="User able to decline submission for Homeowners - Dwelling policy", dataProviderClass = DataProviderUtils.class, dataProvider = "parallelTestDataProvider")
	public void TC62(String browser) throws Exception {

		DriverManager.setDriver(browser);
		WebDriver driver = DriverManager.getDriver();
		Log.testCaseInfo("User able to decline submission for Homeowners - Dwelling policy",driver);
		HomeOwnersDataEngine testData = new HomeOwnersDataEngine("GWTestData_DataEngine.xlsx", "HomeOwners", "TC62");

		try {	

			HomeOwnersStepsImpl pc = HomeOwnersSteps.create();

			pc.loginIntoTheApplication("su", "gw");

			pc.searchAccount(EnterAccountInformation.builder()
					.firstName(testData.getFirstName())
					.lastName(testData.getLastName()).build());

			pc.createAccount(CreateNewAccountFromPerson.builder()
					.firstName(testData.getFirstName())
					.lastName(testData.getLastName())
					.addressLine1(testData.getAddressLine1())
					.state(testData.getState())
					.city(testData.getCity())
					.zipCode(testData.getZipcode())
					.addressType(testData.getAddressType())
					.organization(testData.getProducerOrganization())
					.build());

			pc.selectProduct(ProductNames.HOME_OWNERS);

			pc.selectQualifications(Qualification.builder()

					.policyType(testData.getPolicyType())
					.coverageForm(testData.getCoverageForm())
					.dwellingOccupied(testData.getDwellingOccupied())
					.occupyDwellingFullTime(testData.getDwellingFullTime())
					.build());

			pc.updatePolicyInfo(PolicyInfo.builder()
					.policyEffectiveDate(testData.getCurrentDate())
					.policyTerm(testData.getPolicyTerm())
					.build());

			pc.addDwellingDetails(DwellingDetails.builder().fireProtection(testData.getFireProtection()).build());

			pc.addDwellingConstructionDetails(DwellingConstruction.builder()
					.year(testData.getCurrentYear()).build());

			pc.addCoverages(Coverages.builder(HomeOwnersConstants.PolicyType.DWELLING)
					.coinsurance(testData.getCoInsurance())
					.prohibitedUse(testData.getProhibitedUse())
					.lossOfRentalIncome(testData.getRentalIncome())
					.build());

			pc.addModifiersDetails();

			pc.selectRiskAnalysis(RiskAnalysis.builder(RiskAnalysisType.NONE).build());
			pc.reviewPolicy(PolicyReview.builder(HomeOwnersConstants.PolicyReviewType.NONE).build());
			pc.viewQuote(Quote.builder().build());
			pc.viewForms(Quote.builder().build());
			pc.selectPayments(Payments.builder().build());
			pc.policyCloseOptions(CloseOptions.builder(HomeOwnersConstants.CloseOptionType.DECLINE)
					.reasonDeclined(testData.getReasonDeclined()).build());

			Log.testCaseResult(driver);

		} catch (Exception e) {
			Log.exception(e, DriverManager.getDriver());
		}  finally {
			DriverManager.quitDriver(driver);
			Log.endTestCase();
		}
	}
	/**
	 * @author charu.anbarasan
	 * @param browser
	 * @throws Exception
	 */
	@Test(description="Verify whether the User able to with-drawn the submission for Homeowners - Dwelling policy", dataProviderClass = DataProviderUtils.class, dataProvider = "parallelTestDataProvider")
	public void TC63(String browser) throws Exception {

		DriverManager.setDriver(browser);
		WebDriver driver = DriverManager.getDriver();
		Log.testCaseInfo("Verify whether the User able to with-drawn the submission for Homeowners - Dwelling policy",driver);
		HomeOwnersDataEngine testData = new HomeOwnersDataEngine("GWTestData_DataEngine.xlsx", "HomeOwners", "TC63");

		try {	

			HomeOwnersStepsImpl pc = HomeOwnersSteps.create();

			pc.loginIntoTheApplication("su", "gw");

			pc.searchAccount(EnterAccountInformation.builder()
					.firstName(testData.getFirstName())
					.lastName(testData.getLastName()).build());

			pc.createAccount(CreateNewAccountFromPerson.builder()
					.firstName(testData.getFirstName())
					.lastName(testData.getLastName())
					.addressLine1(testData.getAddressLine1())
					.state(testData.getState())
					.city(testData.getCity())
					.zipCode(testData.getZipcode())
					.addressType(testData.getAddressType())
					.organization(testData.getProducerOrganization())
					.build());

			pc.selectProduct(ProductNames.HOME_OWNERS);

			pc.selectQualifications(Qualification.builder()

					.policyType(testData.getPolicyType())
					.coverageForm(testData.getCoverageForm())
					.dwellingOccupied(testData.getDwellingOccupied())
					.occupyDwellingFullTime(testData.getDwellingFullTime())
					.build());

			pc.updatePolicyInfo(PolicyInfo.builder()
					.policyEffectiveDate(testData.getCurrentDate())
					.policyTerm(testData.getPolicyTerm())
					.build());

			pc.addDwellingDetails(DwellingDetails.builder().fireProtection(testData.getFireProtection()).build());

			pc.addDwellingConstructionDetails(DwellingConstruction.builder()
					.year(testData.getCurrentYear()).build());

			pc.addCoverages(Coverages.builder(HomeOwnersConstants.PolicyType.DWELLING)
					.coinsurance(testData.getCoInsurance())
					.prohibitedUse(testData.getProhibitedUse())
					.lossOfRentalIncome(testData.getRentalIncome())
					.build());

			pc.addModifiersDetails();

			pc.selectRiskAnalysis(RiskAnalysis.builder(RiskAnalysisType.NONE).build());
			pc.reviewPolicy(PolicyReview.builder(HomeOwnersConstants.PolicyReviewType.NONE).build());
			pc.viewQuote(Quote.builder().build());
			pc.viewForms(Quote.builder().build());
			pc.selectPayments(Payments.builder().build());
			pc.policyCloseOptions(CloseOptions.builder(HomeOwnersConstants.CloseOptionType.WITHDRAW_TRANSACTION)
					.build());

			Log.testCaseResult(driver);

		} catch (Exception e) {
			Log.exception(e, DriverManager.getDriver());
		}  finally {
			DriverManager.quitDriver(driver);
			Log.endTestCase();
		}
	}
	/**
	 * @author charu.anbarasan
	 * @param browser
	 * @throws Exception
	 */
	@Test(description="To verify whether pre - renewal direction can be set using Homeowners - Dwelling Policy", dataProviderClass = DataProviderUtils.class, dataProvider = "parallelTestDataProvider")
	public void TC65(String browser) throws Exception {

		DriverManager.setDriver(browser);
		WebDriver driver = DriverManager.getDriver();
		Log.testCaseInfo("To verify whether pre - renewal direction can be set using Homeowners - Dwelling Policy",driver);
		HomeOwnersDataEngine testData = new HomeOwnersDataEngine("GWTestData_DataEngine.xlsx", "HomeOwners", "TC65");

		try {	

			HomeOwnersStepsImpl pc = HomeOwnersSteps.create();

			pc.loginIntoTheApplication("su", "gw");

			//Get policy number from Excel sheet which is generated by data generator using auto generated policy number created copy submission 

			pc.searchPolicyNumber(PolicyDetails.builder().policyNumber(testData.getPolicyNumber()).build());

			pc.copySubmissions();

			pc.viewPolicy();

			pc.policyPreRenewalDirection(PreRenewalDirection.builder()
					.direction(testData.getDirection())
					.security(testData.getSecurity())
					.reason(testData.getPreRenewalReason())
					.text(testData.getText()).build());

			Log.testCaseResult(driver);

		} catch (Exception e) {
			Log.exception(e, DriverManager.getDriver());
		}  finally {

			DriverManager.quitDriver(driver);
			Log.endTestCase();
		}
	}

	/**
	 * @author vignesh.ravi
	 * @param browser
	 * @throws Exception
	 */
	@Test(description="User is able to complete a Rewrite Full Term transaction for Homeowners policy", dataProviderClass = DataProviderUtils.class, dataProvider = "parallelTestDataProvider")
	public void TC56(String browser) throws Exception {

		DriverManager.setDriver(browser);
		WebDriver driver = DriverManager.getDriver();
		Log.testCaseInfo("User is able to complete a Rewrite Full Term transaction for Homeowners policy",driver);
		HomeOwnersDataEngine testData = new HomeOwnersDataEngine("GWTestData_DataEngine.xlsx", "HomeOwners", "TC56");

		try {	

			HomeOwnersStepsImpl pc = HomeOwnersSteps.create();

			pc.loginIntoTheApplication("su", "gw");

			//Get policy number from Excel sheet which is generated by data generator using auto generated policy number created copy submission 

			pc.searchPolicyNumber(PolicyDetails.builder().policyNumber(testData.getPolicyNumber()).build());

			pc.copySubmissions();

			pc.viewPolicy();

			pc.cancelPolicy(CancellationSource.builder().source(testData.getSource())
					.reason(testData.getReason()).build());

			pc.viewPolicy();
			
			pc.policyRewriteFullTerm();

			pc.updatePolicyInfo(PolicyInfo.builder()
					.policyTerm(testData.getPolicyTerm2())
					.policyExpirationDate(testData.getDateSixMonthAhead())
					.build());
			pc.addDwellingDetails(DwellingDetails.builder().build());
			pc.addDwellingConstructionDetails(DwellingConstruction.builder().build());
			pc.addCoverages(Coverages.builder(HomeOwnersConstants.PolicyType.NONE).build());
			pc.addModifiersDetails();
			pc.selectRiskAnalysis(RiskAnalysis.builder(RiskAnalysisType.NONE).build());
			pc.reviewPolicy(PolicyReview.builder(HomeOwnersConstants.PolicyReviewType.NONE).build());
			pc.viewQuote(Quote.builder().build());
			pc.viewForms(Quote.builder().build());
			pc.selectPayments(Payments.builder().build());
			pc.issuepolicy(HomeOwnersConstants.Transactions.REWRITE_FULL_TERM);
			pc.approveUWissue(UWIssueType.builder().build());
			pc.issuepolicy(HomeOwnersConstants.Transactions.REWRITE_FULL_TERM);
			pc.viewPolicy();

			Log.testCaseResult(driver);

		} catch (Exception e) {
			Log.exception(e, DriverManager.getDriver());
		}  finally {
			DriverManager.quitDriver(driver);
			Log.endTestCase();
		}
	}
	/**
	 * @author vignesh.ravi
	 * @param browser
	 * @throws Exception
	 */
	@Test(description="User should able to Rewrite new term transaction using Home owners policy", dataProviderClass = DataProviderUtils.class, dataProvider = "parallelTestDataProvider")
	public void TC58(String browser) throws Exception {


		DriverManager.setDriver(browser);
		WebDriver driver = DriverManager.getDriver();
		Log.testCaseInfo("User should able to Rewrite new term transaction using Home owners policy",driver);
		HomeOwnersDataEngine testData = new HomeOwnersDataEngine("GWTestData_DataEngine.xlsx", "HomeOwners", "TC58");

		try {	

			HomeOwnersStepsImpl pc = HomeOwnersSteps.create();

			pc.loginIntoTheApplication("su", "gw");

			//Get policy number from Excel sheet which is generated by data generator using auto generated policy number created copy submission 

			pc.searchPolicyNumber(PolicyDetails.builder().policyNumber(testData.getPolicyNumber()).build());

			pc.copySubmissions();

			pc.viewPolicy();

			pc.cancelPolicy(CancellationSource.builder().source(testData.getSource())
					.reason(testData.getReason()).build());
			
			pc.viewPolicy();
			
			pc.policyRewriteNewTerm();

			pc.updatePolicyInfo(PolicyInfo.builder()
					.policyTerm(testData.getPolicyTerm())
					.policyExpirationDate(testData.getDateSixMonthAhead())
					.build());
			
			pc.addDwellingDetails(DwellingDetails.builder().build());
			pc.addDwellingConstructionDetails(DwellingConstruction.builder().build());
			pc.addCoverages(Coverages.builder(HomeOwnersConstants.PolicyType.NONE).build());
			pc.addModifiersDetails();
			pc.selectRiskAnalysis(RiskAnalysis.builder(RiskAnalysisType.NONE).build());
			pc.reviewPolicy(PolicyReview.builder(HomeOwnersConstants.PolicyReviewType.NONE).build());
			pc.viewQuote(Quote.builder().build());
			pc.viewForms(Quote.builder().build());
			pc.selectPayments(Payments.builder().build());
			pc.issuepolicy(HomeOwnersConstants.Transactions.REWRITE_NEW_TERM);
			pc.approveUWissue(UWIssueType.builder().build());
			pc.issuepolicy(HomeOwnersConstants.Transactions.REWRITE_NEW_TERM);
			pc.viewPolicy();

			Log.testCaseResult(driver);

		} catch (Exception e) {
			Log.exception(e, DriverManager.getDriver());
		}  finally {
			DriverManager.quitDriver(driver);
			Log.endTestCase();
		}
	}

	/**
	 * @author vignesh.ravi
	 * @param browser
	 * @throws Exception
	 */
	@Test(description="User can able to Quote and Issue the Renewal Transaction for Homeowners Policy", dataProviderClass = DataProviderUtils.class, dataProvider = "parallelTestDataProvider")
	public void TC59(String browser) throws Exception {

		DriverManager.setDriver(browser);
		WebDriver driver = DriverManager.getDriver();
		Log.testCaseInfo("User  can able to Quote and Issue the Renewal Transaction for Homeowners Policy",driver);
		HomeOwnersDataEngine testData = new HomeOwnersDataEngine("GWTestData_DataEngine.xlsx", "HomeOwners", "TC59");

		try {	

			HomeOwnersStepsImpl pc = HomeOwnersSteps.create();

			pc.loginIntoTheApplication("su", "gw");

			//Get policy number from Excel sheet which is generated by data generator using auto generated policy number created copy submission 

			pc.searchPolicyNumber(PolicyDetails.builder().policyNumber(testData.getPolicyNumber()).build());

			pc.copySubmissions();

			pc.viewPolicy();

			pc.policyRenew();
			pc.updatePolicyInfo(PolicyInfo.builder().build());
			pc.addDwellingDetails(DwellingDetails.builder().build());
			pc.addDwellingConstructionDetails(DwellingConstruction.builder().build());
			pc.addCoverages(Coverages.builder(HomeOwnersConstants.PolicyType.NONE).build());
			pc.addModifiersDetails();
			pc.selectRiskAnalysis(RiskAnalysis.builder(RiskAnalysisType.NONE).build());
			pc.reviewPolicy(PolicyReview.builder(HomeOwnersConstants.PolicyReviewType.RENEW).build());
			pc.viewQuote(Quote.builder().build());
			pc.viewForms(Quote.builder().build());
			pc.issuepolicy(HomeOwnersConstants.Transactions.RENEW_POLICY);
			pc.policyRenewal(RenewPolicy.builder().renewalcode(testData.getRenewalCode()).build());
			pc.viewPolicy();

			Log.testCaseResult(driver);

		} catch (Exception e) {
			Log.exception(e, DriverManager.getDriver());
		}  finally {
			DriverManager.quitDriver(driver);
			Log.endTestCase();
		}
	}
	/**
	 * @author vignesh.ravi
	 * @param browser
	 * @throws Exception
	 */
	@Test(description="user able to Cancel a homeowners policy using flat cancellation method successfully", dataProviderClass = DataProviderUtils.class, dataProvider = "parallelTestDataProvider")
	public void TC54(String browser) throws Exception {

		DriverManager.setDriver(browser);
		WebDriver driver = DriverManager.getDriver();
		Log.testCaseInfo("user able to Cancel a homeowners policy using flat cancellation method successfully",driver);
		HomeOwnersDataEngine testData = new HomeOwnersDataEngine("GWTestData_DataEngine.xlsx", "HomeOwners", "TC54");

		try {	

			HomeOwnersStepsImpl pc = HomeOwnersSteps.create();

			pc.loginIntoTheApplication("su", "gw");

			//Get policy number from Excel sheet which is generated by data generator using auto generated policy number created copy submission 

			pc.searchPolicyNumber(PolicyDetails.builder().policyNumber(testData.getPolicyNumber()).build());

			pc.copySubmissions();

			pc.viewPolicy();

			pc.cancelPolicy(CancellationSource.builder().source(testData.getSource())
					.reason(testData.getReason()).build());

			pc.viewPolicy();

			Log.testCaseResult(driver);

		} catch (Exception e) {
			Log.exception(e, DriverManager.getDriver());
		}  finally {
			DriverManager.quitDriver(driver);
			Log.endTestCase();
		}
	}

	/**
	 * @author somasundaram.muthu
	 * @param browser
	 * @throws Exception
	 */
	@Test(description="Complete a Rewrite Remainder of Term transaction for Homeowners policy.", dataProviderClass = DataProviderUtils.class, dataProvider = "parallelTestDataProvider")
	public void TC57(String browser) throws Exception {

		DriverManager.setDriver(browser);
		WebDriver driver = DriverManager.getDriver();
		Log.testCaseInfo("Complete a Rewrite Remainder of Term transaction for Homeowners policy.",driver);
		HomeOwnersDataEngine testData = new HomeOwnersDataEngine("GWTestData_DataEngine.xlsx", "HomeOwners", "TC57");

		try {	

			HomeOwnersStepsImpl pc = HomeOwnersSteps.create();

			pc.loginIntoTheApplication("su", "gw");

			//Get policy number from Excel sheet which is generated by data generator using auto generated policy number created copy submission 

			pc.searchPolicyNumber(PolicyDetails.builder().policyNumber(testData.getPolicyNumber()).build());

			pc.copySubmissions();

			pc.viewPolicy();

			pc.cancelPolicy(CancellationSource.builder().source(testData.getSource())
					.reason(testData.getReason()).build());

			pc.viewPolicy();

			pc.policyRewriteRemainderTerm();

			pc.updatePolicyInfo(PolicyInfo.builder().build());
			
			pc.addDwellingDetails(DwellingDetails.builder().fireProtection(testData.getFireProtection()).build());
			
			pc.addDwellingConstructionDetails(DwellingConstruction.builder()
					.year(testData.getCurrentYear()).build());
			
			pc.addCoverages(Coverages.builder(HomeOwnersConstants.PolicyType.NONE).build());
			pc.addModifiersDetails();
			pc.selectRiskAnalysis(RiskAnalysis.builder(RiskAnalysisType.NONE).build());
			pc.reviewPolicy(PolicyReview.builder(HomeOwnersConstants.PolicyReviewType.NONE).build());
			pc.viewQuote(Quote.builder().build());
			pc.issuepolicy(HomeOwnersConstants.Transactions.REWRITE_REMAINDER_TERM);
			pc.viewPolicy();

			Log.testCaseResult(driver);

		} catch (Exception e) {
			Log.exception(e, DriverManager.getDriver());
		}  finally {
			DriverManager.quitDriver(driver);
			Log.endTestCase();
		}
	}

	/**
	 * @author surendar.baskaran
	 * @param browser
	 * @throws Exception
	 */
	@Test(description ="Verify whether user able to Quote and Issue the Homeowners Policy", dataProviderClass = DataProviderUtils.class, dataProvider = "parallelTestDataProvider")
	public void TC74(String browser) throws Exception {

		DriverManager.setDriver(browser);
		WebDriver driver = DriverManager.getDriver();
		Log.testCaseInfo("Verify whether user able to Quote and Issue the Homeowners Policy",driver);
		HomeOwnersDataEngine testData = new HomeOwnersDataEngine("GWTestData_DataEngine.xlsx", "HomeOwners", "TC74");

		try {	

			HomeOwnersStepsImpl pc = HomeOwnersSteps.create();

			pc.loginIntoTheApplication("su", "gw");

			pc.searchAccount(EnterAccountInformation.builder()
					.firstName(testData.getFirstName())
					.lastName(testData.getLastName()).build());

			pc.createAccount(CreateNewAccountFromPerson.builder()
					.firstName(testData.getFirstName())
					.lastName(testData.getLastName())
					.addressLine1(testData.getAddressLine1())
					.state(testData.getState())
					.city(testData.getCity())
					.zipCode(testData.getZipcode())
					.addressType(testData.getAddressType())
					.organization(testData.getProducerOrganization())
					.build());

			pc.selectProduct(ProductNames.HOME_OWNERS);

			pc.selectQualifications(Qualification.builder()

					.policyType(testData.getPolicyType())
					.coverageForm(testData.getCoverageForm())
					.dwellingOccupied(testData.getDwellingOccupied())
					.occupyDwellingFullTime(testData.getDwellingFullTime())
					.build());


			pc.updatePolicyInfo(PolicyInfo.builder()
					.policyEffectiveDate(testData.getCurrentDate())
					.policyTerm(testData.getPolicyTerm())
					.policyExpirationDate(testData.getDateSixMonthAhead())
					.build());

			pc.addDwellingDetails(DwellingDetails.builder().fireProtection(testData.getFireProtection()).build());

			pc.addDwellingConstructionDetails(DwellingConstruction.builder()
					.year(testData.getCurrentYear()).build());

			pc.addCoverages(Coverages.builder(HomeOwnersConstants.PolicyType.CONDOMINIUM)
					.coinsurance(testData.getCoInsurance())
					.covCLimit(testData.getCovCLimit())
					.valuationMethod(testData.getValuationMethod())
					.prohibitedUse(testData.getProhibitedUse())
					.lossOfRentalIncome(testData.getRentalIncome())
					.build());

			pc.addModifiersDetails();

			pc.selectRiskAnalysis(RiskAnalysis.builder(RiskAnalysisType.NONE).build());
			pc.reviewPolicy(PolicyReview.builder(HomeOwnersConstants.PolicyReviewType.NONE).build());
			pc.viewQuote(Quote.builder().build());
			pc.viewForms(Quote.builder().build());
			pc.issuepolicy(HomeOwnersConstants.Transactions.SUBMISSION);

			Log.testCaseResult(driver);

		} catch (Exception e) {
			Log.exception(e, DriverManager.getDriver());
		}  finally {
			DriverManager.quitDriver(driver);
			Log.endTestCase();
		}
	}

	/**
	 * @author surendar.baskaran
	 * @param browser
	 * @throws Exception
	 */
	@Test(description = "Verify whether user able to Quote and Issue the Rewrite Transaction for Homeowners Policy", dataProviderClass = DataProviderUtils.class, dataProvider = "parallelTestDataProvider")
	public void TC80(String browser) throws Exception {

		DriverManager.setDriver(browser);
		WebDriver driver = DriverManager.getDriver();
		Log.testCaseInfo("Verify whether user able to Quote and Issue the Rewrite Transaction for Homeowners Policy",driver);
		HomeOwnersDataEngine testData = new HomeOwnersDataEngine("GWTestData_DataEngine.xlsx", "HomeOwners", "TC80");

		try {	

			HomeOwnersStepsImpl pc = HomeOwnersSteps.create();

			pc.loginIntoTheApplication("su", "gw");

			//Get policy number from Excel sheet which is generated by data generator using auto generated policy number created copy submission 

			pc.searchPolicyNumber(PolicyDetails.builder().policyNumber(testData.getPolicyNumber()).build());

			pc.copySubmissions();

			pc.viewPolicy();

			pc.cancelPolicy(CancellationSource.builder().source(testData.getSource())
					.reason(testData.getReason()).build());
			pc.viewPolicy();

			pc.policyRewriteRemainderTerm();

			pc.updatePolicyInfo(PolicyInfo.builder().build());
			pc.addDwellingDetails(DwellingDetails.builder().fireProtection(testData.getFireProtection()).build());
			pc.addDwellingConstructionDetails(DwellingConstruction.builder()
					.year(testData.getCurrentYear()).build());
			pc.addCoverages(Coverages.builder(HomeOwnersConstants.PolicyType.NONE)
					.build());
			pc.addModifiersDetails();
			pc.selectRiskAnalysis(RiskAnalysis.builder(RiskAnalysisType.NONE).build());
			pc.reviewPolicy(PolicyReview.builder(HomeOwnersConstants.PolicyReviewType.NONE).build());
			pc.viewQuote(Quote.builder().build());
			pc.issuepolicy(HomeOwnersConstants.Transactions.REWRITE_REMAINDER_TERM);
			pc.viewPolicy();

			Log.testCaseResult(driver);

		} catch (Exception e) {
			Log.exception(e, DriverManager.getDriver());
		}  finally {
			DriverManager.quitDriver(driver);
			Log.endTestCase();
		}
	}


	/**
	 * @author surendar.baskaran
	 * @param browser
	 * @throws Exception
	 */
	@Test(description = "Verify whether user able to Quote and Issue the Renewal Transaction for Homeowners Policy", dataProviderClass = DataProviderUtils.class, dataProvider = "parallelTestDataProvider")
	public void TC82(String browser) throws Exception {

		DriverManager.setDriver(browser);
		WebDriver driver = DriverManager.getDriver();
		Log.testCaseInfo("Verify whether user able to Quote and Issue the Renewal Transaction for Homeowners Policy",driver);
		HomeOwnersDataEngine testData = new HomeOwnersDataEngine("GWTestData_DataEngine.xlsx", "HomeOwners", "TC82");

		try {	

			HomeOwnersStepsImpl pc = HomeOwnersSteps.create();

			pc.loginIntoTheApplication("su", "gw");

			//Get policy number from Excel sheet which is generated by data generator using auto generated policy number created copy submission 

			pc.searchPolicyNumber(PolicyDetails.builder().policyNumber(testData.getPolicyNumber()).build());

			pc.copySubmissions();

			pc.viewPolicy();

			pc.policyRenew();
			pc.updatePolicyInfo(PolicyInfo.builder()
					.build());
			pc.addDwellingDetails(DwellingDetails.builder().build());
			pc.addDwellingConstructionDetails(DwellingConstruction.builder().build());
			pc.addCoverages(Coverages.builder(HomeOwnersConstants.PolicyType.NONE).build());
			pc.addModifiersDetails();
			pc.selectRiskAnalysis(RiskAnalysis.builder(RiskAnalysisType.NONE).build());
			pc.reviewPolicy(PolicyReview.builder(HomeOwnersConstants.PolicyReviewType.RENEW).build());
			pc.viewQuote(Quote.builder().build());
			pc.viewForms(Quote.builder().build());
			pc.issuepolicy(HomeOwnersConstants.Transactions.RENEW_POLICY);
			pc.policyRenewal(RenewPolicy.builder().renewalcode(testData.getRenewalCode()).build());
			pc.viewPolicy();

			Log.testCaseResult(driver);

		} catch (Exception e) {
			Log.exception(e, DriverManager.getDriver());
		}  finally {
			DriverManager.quitDriver(driver);
			Log.endTestCase();
		}
	}

	/**
	 * @author surendar.baskaran
	 * @param browser
	 * @throws Exception
	 */
	@Test(description = "To verify the Rewrite new term transaction using Home owners policy", dataProviderClass = DataProviderUtils.class, dataProvider = "parallelTestDataProvider")
	public void TC81(String browser) throws Exception {

		DriverManager.setDriver(browser);
		WebDriver driver = DriverManager.getDriver();
		Log.testCaseInfo("To verify the Rewrite new term transaction using Home owners policy",driver);
		HomeOwnersDataEngine testData = new HomeOwnersDataEngine("GWTestData_DataEngine.xlsx", "HomeOwners", "TC81");

		try {	

			HomeOwnersStepsImpl pc = HomeOwnersSteps.create();

			pc.loginIntoTheApplication("su", "gw");

			//Get policy number from Excel sheet which is generated by data generator using auto generated policy number created copy submission 

			pc.searchPolicyNumber(PolicyDetails.builder().policyNumber(testData.getPolicyNumber()).build());

			pc.copySubmissions();

			pc.viewPolicy();

			pc.cancelPolicy(CancellationSource.builder().source(testData.getSource())
					.reason(testData.getReason()).build());
			pc.viewPolicy();
			pc.policyRewriteNewTerm();

			pc.updatePolicyInfo(PolicyInfo.builder()
					.policyTerm(testData.getPolicyTerm2())
					.policyExpirationDate(testData.getDateSixMonthAhead())
					.build());

			pc.addDwellingDetails(DwellingDetails.builder().build());
			pc.addDwellingConstructionDetails(DwellingConstruction.builder().build());
			pc.addCoverages(Coverages.builder(HomeOwnersConstants.PolicyType.NONE).build());
			pc.addModifiersDetails();
			pc.selectRiskAnalysis(RiskAnalysis.builder(RiskAnalysisType.NONE).build());
			pc.reviewPolicy(PolicyReview.builder(HomeOwnersConstants.PolicyReviewType.NONE).build());
			pc.viewQuote(Quote.builder().build());
			pc.viewForms(Quote.builder().build());
			pc.selectPayments(Payments.builder().build());
			pc.issuepolicy(HomeOwnersConstants.Transactions.REWRITE_NEW_TERM);
			pc.approveUWissue(UWIssueType.builder().build());
			pc.issuepolicy(HomeOwnersConstants.Transactions.REWRITE_NEW_TERM);
			pc.viewPolicy();

			Log.testCaseResult(driver);

		} catch (Exception e) {
			Log.exception(e, DriverManager.getDriver());
		}  finally {
			DriverManager.quitDriver(driver);
			Log.endTestCase();
		}
	}

	/**
	 * @author surendar.baskaran
	 * @param browser
	 * @throws Exception
	 */
	@Test(description = "To verify whether user able to Quote and Issue the Policy Change Transaction - Homeowners Condominium", dataProviderClass = DataProviderUtils.class, dataProvider = "parallelTestDataProvider")
	public void TC75(String browser) throws Exception {

		DriverManager.setDriver(browser);
		WebDriver driver = DriverManager.getDriver();
		Log.testCaseInfo("To verify whether user able to Quote and Issue the Policy Change Transaction - Homeowners Condominium",driver);
		HomeOwnersDataEngine testData = new HomeOwnersDataEngine("GWTestData_DataEngine.xlsx", "HomeOwners", "TC75");

		try {	

			HomeOwnersStepsImpl pc = HomeOwnersSteps.create();

			pc.loginIntoTheApplication("su", "gw");

			//Get policy number from Excel sheet which is generated by data generator using auto generated policy number created copy submission 

			pc.searchPolicyNumber(PolicyDetails.builder().policyNumber(testData.getPolicyNumber()).build());

			pc.copySubmissions();

			pc.viewPolicy();

			pc.policyChange(PolicyChange.builder().date(testData.getDateOneMonthAhead()).build());
			pc.updatePolicyInfo(PolicyInfo.builder()
					.next(true).build());
			pc.addDwellingDetails(DwellingDetails.builder().fireProtection(testData.getFireProtection2()).build());
			pc.addDwellingConstructionDetails(DwellingConstruction.builder().build());
			pc.addCoverages(Coverages.builder(HomeOwnersConstants.PolicyType.NONE).build());
			pc.addModifiersDetails();
			pc.selectRiskAnalysis(RiskAnalysis.builder(RiskAnalysisType.NONE).build());
			pc.reviewPolicy(PolicyReview.builder(HomeOwnersConstants.PolicyReviewType.NONE).build());
			pc.viewQuote(Quote.builder().build());
			pc.viewForms(Quote.builder().build());
			pc.issuepolicy(HomeOwnersConstants.Transactions.POLICY_CHANGE);
			pc.viewPolicy();

			Log.testCaseResult(driver);

		} catch (Exception e) {
			Log.exception(e, DriverManager.getDriver());
		}  finally {
			DriverManager.quitDriver(driver);
			Log.endTestCase();
		}
	}

	/**
	 * @author somasundaram.muthu
	 * @param browser
	 * @throws Exception
	 */
	@Test(description="To verify whether user able to Cancel a condo policy using pro rata cancellation method.", dataProviderClass = DataProviderUtils.class, dataProvider = "parallelTestDataProvider")
	public void TC76(String browser) throws Exception {

		DriverManager.setDriver(browser);
		WebDriver driver = DriverManager.getDriver();
		Log.testCaseInfo("To verify whether user able to Cancel a condo policy using pro rata cancellation method.",driver);
		HomeOwnersDataEngine testData = new HomeOwnersDataEngine("GWTestData_DataEngine.xlsx", "HomeOwners", "TC76");

		try {	

			HomeOwnersStepsImpl pc = HomeOwnersSteps.create();

			pc.loginIntoTheApplication("su", "gw");

			//Get policy number from Excel sheet which is generated by data generator using auto generated policy number created copy submission 

			pc.searchPolicyNumber(PolicyDetails.builder().policyNumber(testData.getPolicyNumber()).build());

			pc.copySubmissions();

			pc.viewPolicy();

			pc.cancelPolicy(CancellationSource.builder().source(testData.getSource())
					.reason(testData.getReason()).build());
			pc.viewPolicy();

			Log.testCaseResult(driver);

		} catch (Exception e) {
			Log.exception(e, DriverManager.getDriver());
		}  finally {
			DriverManager.quitDriver(driver);
			Log.endTestCase();
		}
	}

	/**
	 * @author somasundaram.muthu
	 * @param browser
	 * @throws Exception
	 */
	@Test(description="To verify whether user able to Quote and Issue the Reinstate Transaction for Homeowners Policy", dataProviderClass = DataProviderUtils.class, dataProvider = "parallelTestDataProvider")
	public void TC78(String browser) throws Exception {

		DriverManager.setDriver(browser);
		WebDriver driver = DriverManager.getDriver();
		Log.testCaseInfo("To verify whether user able to Quote and Issue the Reinstate Transaction for Homeowners Policy.",driver);
		HomeOwnersDataEngine testData = new HomeOwnersDataEngine("GWTestData_DataEngine.xlsx", "HomeOwners", "TC78");

		try {	

			HomeOwnersStepsImpl pc = HomeOwnersSteps.create();

			pc.loginIntoTheApplication("su", "gw");

			//Get policy number from Excel sheet which is generated by data generator using auto generated policy number created copy submission 

			pc.searchPolicyNumber(PolicyDetails.builder().policyNumber(testData.getPolicyNumber()).build());

			pc.copySubmissions();

			pc.viewPolicy();

			pc.cancelPolicy(CancellationSource.builder().source(testData.getSource())
					.reason(testData.getReason()).build());
			pc.viewPolicy();
			pc.reinstatePolicy(ReinstatementReason.builder().reason(testData.getReinstateReason()).build());
			pc.viewPolicy();

			Log.testCaseResult(driver);

		} catch (Exception e) {
			Log.exception(e, DriverManager.getDriver());
		}  finally {
			DriverManager.quitDriver(driver);
			Log.endTestCase();
		}
	}

	/**
	 * @author somasundaram.muthu
	 * @param browser
	 * @throws Exception
	 */
	@Test(description="User able to process Not-Taken option on submission for Homeowners - Condominium policy", dataProviderClass = DataProviderUtils.class, dataProvider = "parallelTestDataProvider")
	public void TC84(String browser) throws Exception {

		DriverManager.setDriver(browser);
		WebDriver driver = DriverManager.getDriver();
		Log.testCaseInfo("User able to process Not-Taken option on submission for Homeowners - Condominium policy",driver);
		HomeOwnersDataEngine testData = new HomeOwnersDataEngine("GWTestData_DataEngine.xlsx", "HomeOwners", "TC84");

		try {	

			HomeOwnersStepsImpl pc = HomeOwnersSteps.create();

			pc.loginIntoTheApplication("su", "gw");

			pc.searchAccount(EnterAccountInformation.builder()
					.firstName(testData.getFirstName())
					.lastName(testData.getLastName()).build());

			pc.createAccount(CreateNewAccountFromPerson.builder()
					.firstName(testData.getFirstName())
					.lastName(testData.getLastName())
					.addressLine1(testData.getAddressLine1())
					.state(testData.getState())
					.city(testData.getCity())
					.zipCode(testData.getZipcode())
					.addressType(testData.getAddressType())
					.organization(testData.getProducerOrganization())
					.build());

			pc.selectProduct(ProductNames.HOME_OWNERS);

			pc.selectQualifications(Qualification.builder()

					.policyType(testData.getPolicyType())
					.coverageForm(testData.getCoverageForm())
					.dwellingOccupied(testData.getDwellingOccupied())
					.occupyDwellingFullTime(testData.getDwellingFullTime())
					.build());


			pc.updatePolicyInfo(PolicyInfo.builder()
					.policyEffectiveDate(testData.getCurrentDate())
					.policyTerm(testData.getPolicyTerm())
					.policyExpirationDate(testData.getDateSixMonthAhead())
					.build());

			pc.addDwellingDetails(DwellingDetails.builder().fireProtection(testData.getFireProtection()).build());

			pc.addDwellingConstructionDetails(DwellingConstruction.builder()
					.year(testData.getCurrentYear()).build());

			pc.addCoverages(Coverages.builder(HomeOwnersConstants.PolicyType.CONDOMINIUM)
					.coinsurance(testData.getCoInsurance())
					.covCLimit(testData.getCovCLimit())
					.valuationMethod(testData.getValuationMethod())
					.prohibitedUse(testData.getProhibitedUse())
					.lossOfRentalIncome(testData.getRentalIncome())
					.build());
			pc.addModifiersDetails();

			pc.selectRiskAnalysis(RiskAnalysis.builder(RiskAnalysisType.NONE).build());
			pc.reviewPolicy(PolicyReview.builder(HomeOwnersConstants.PolicyReviewType.NONE).build());
			pc.viewQuote(Quote.builder().build());
			pc.viewForms(Quote.builder().build());
			pc.policyCloseOptions(CloseOptions.builder(HomeOwnersConstants.CloseOptionType.NOT_TAKEN)
					.reasonNotTaken(testData.getReasonNotTaken())
					.build());
			Log.testCaseResult(driver);

		} catch (Exception e) {
			Log.exception(e, DriverManager.getDriver());
		}  finally {
			DriverManager.quitDriver(driver);
			Log.endTestCase();
		}
	}

	/**
	 * @author somasundaram.muthu
	 * @param browser
	 * @throws Exception
	 */
	@Test(description="User able to with-drawn the submission for Homeowners - Condominium policy", dataProviderClass = DataProviderUtils.class, dataProvider = "parallelTestDataProvider")
	public void TC86(String browser) throws Exception {

		DriverManager.setDriver(browser);
		WebDriver driver = DriverManager.getDriver();
		Log.testCaseInfo("User able to with-drawn the submission for Homeowners - Condominium policy",driver);
		HomeOwnersDataEngine testData = new HomeOwnersDataEngine("GWTestData_DataEngine.xlsx", "HomeOwners", "TC86");

		try {	

			HomeOwnersStepsImpl pc = HomeOwnersSteps.create();

			pc.loginIntoTheApplication("su", "gw");

			pc.searchAccount(EnterAccountInformation.builder()
					.firstName(testData.getFirstName())
					.lastName(testData.getLastName()).build());

			pc.createAccount(CreateNewAccountFromPerson.builder()
					.firstName(testData.getFirstName())
					.lastName(testData.getLastName())
					.addressLine1(testData.getAddressLine1())
					.state(testData.getState())
					.city(testData.getCity())
					.zipCode(testData.getZipcode())
					.addressType(testData.getAddressType())
					.organization(testData.getProducerOrganization())
					.build());

			pc.selectProduct(ProductNames.HOME_OWNERS);

			pc.selectQualifications(Qualification.builder()

					.policyType(testData.getPolicyType())
					.coverageForm(testData.getCoverageForm())
					.dwellingOccupied(testData.getDwellingOccupied())
					.occupyDwellingFullTime(testData.getDwellingFullTime())
					.build());


			pc.updatePolicyInfo(PolicyInfo.builder()
					.policyEffectiveDate(testData.getCurrentDate())
					.policyTerm(testData.getPolicyTerm())
					.policyExpirationDate(testData.getDateSixMonthAhead())
					.build());

			pc.addDwellingDetails(DwellingDetails.builder().fireProtection(testData.getFireProtection()).build());

			pc.addDwellingConstructionDetails(DwellingConstruction.builder()
					.year(testData.getCurrentYear()).build());

			pc.addCoverages(Coverages.builder(HomeOwnersConstants.PolicyType.CONDOMINIUM)
					.coinsurance(testData.getCoInsurance())
					.covCLimit(testData.getCovCLimit())
					.valuationMethod(testData.getValuationMethod())
					.prohibitedUse(testData.getProhibitedUse())
					.lossOfRentalIncome(testData.getRentalIncome())
					.build());
			pc.addModifiersDetails();

			pc.selectRiskAnalysis(RiskAnalysis.builder(RiskAnalysisType.NONE).build());
			pc.reviewPolicy(PolicyReview.builder(HomeOwnersConstants.PolicyReviewType.NONE).build());
			pc.viewQuote(Quote.builder().build());
			pc.viewForms(Quote.builder().build());
			pc.selectPayments(Payments.builder().build());
			pc.policyCloseOptions(CloseOptions.builder(HomeOwnersConstants.CloseOptionType.WITHDRAW_TRANSACTION)
					.build());

			Log.testCaseResult(driver);

		} catch (Exception e) {
			Log.exception(e, DriverManager.getDriver());
		}  finally {
			DriverManager.quitDriver(driver);
			Log.endTestCase();
		}
	}

	/**
	 * @author somasundaram.muthu
	 * @param browser
	 * @throws Exception
	 */
	@Test(description="Cancel a condo policy using flat cancellation method", dataProviderClass = DataProviderUtils.class, dataProvider = "parallelTestDataProvider")
	public void TC77(String browser) throws Exception {

		DriverManager.setDriver(browser);
		WebDriver driver = DriverManager.getDriver();
		Log.testCaseInfo("Cancel a condo policy using flat cancellation method",driver);
		HomeOwnersDataEngine testData = new HomeOwnersDataEngine("GWTestData_DataEngine.xlsx", "HomeOwners", "TC77");

		try {	

			HomeOwnersStepsImpl pc = HomeOwnersSteps.create();

			pc.loginIntoTheApplication("su", "gw");

			//Get policy number from Excel sheet which is generated by data generator using auto generated policy number created copy submission 

			pc.searchPolicyNumber(PolicyDetails.builder().policyNumber(testData.getPolicyNumber()).build());

			pc.copySubmissions();

			pc.viewPolicy();

			pc.cancelPolicy(CancellationSource.builder().source(testData.getSource())
					.reason(testData.getReason()).build());
			pc.viewPolicy();

			Log.testCaseResult(driver);

		} catch (Exception e) {
			Log.exception(e, DriverManager.getDriver());
		}  finally {
			DriverManager.quitDriver(driver);
			Log.endTestCase();
		}
	}

	/**
	 * @author somasundaram.muthu
	 * @param browser
	 * @throws Exception
	 */
	@Test(description="Verify whether user able to set Pre-Renewal direction for the Homeowners - Condominium Policy", dataProviderClass = DataProviderUtils.class, dataProvider = "parallelTestDataProvider")
	public void TC88(String browser) throws Exception {

		DriverManager.setDriver(browser);
		WebDriver driver = DriverManager.getDriver();
		Log.testCaseInfo("Verify whether user able to set Pre-Renewal direction for the Homeowners - Condominium Policy ",driver);
		HomeOwnersDataEngine testData = new HomeOwnersDataEngine("GWTestData_DataEngine.xlsx", "HomeOwners", "TC88");

		try {	

			HomeOwnersStepsImpl pc = HomeOwnersSteps.create();

			pc.loginIntoTheApplication("su", "gw");

			//Get policy number from Excel sheet which is generated by data generator using auto generated policy number created copy submission 

			pc.searchPolicyNumber(PolicyDetails.builder().policyNumber(testData.getPolicyNumber()).build());

			pc.policyPreRenewalDirection(PreRenewalDirection.builder()
					.direction(testData.getDirection())
					.security(testData.getSecurity())
					.reason(testData.getPreRenewalReason())
					.text(testData.getText()).build());

			Log.testCaseResult(driver);

		} catch (Exception e) {
			Log.exception(e, DriverManager.getDriver());
		}  finally {
			DriverManager.quitDriver(driver);
			Log.endTestCase();
		}
	}

	/**
	 * @author somasundaram.muthu
	 * @param browser
	 * @throws Exception
	 */
	@Test(description= "Verify whether User can able to copy submission transaction for Homeowners - Condominium policy", dataProviderClass = DataProviderUtils.class, dataProvider = "parallelTestDataProvider")
	public void TC83(String browser) throws Exception {

		DriverManager.setDriver(browser);
		WebDriver driver = DriverManager.getDriver();
		Log.testCaseInfo("Verify whether User can able to copy submission transaction for Homeowners - Condominium policy",driver);
		HomeOwnersDataEngine testData = new HomeOwnersDataEngine("GWTestData_DataEngine.xlsx", "HomeOwners", "TC83");

		try {	

			HomeOwnersStepsImpl pc = HomeOwnersSteps.create();

			pc.loginIntoTheApplication("su", "gw");

			//Get policy number from Excel sheet which is generated by data generator using auto generated policy number created copy submission 

			pc.searchPolicyNumber(PolicyDetails.builder().policyNumber(testData.getPolicyNumber()).build());

			pc.copySubmission();
			pc.selectQualifications(Qualification.builder().build());
			pc.updatePolicyInfo(PolicyInfo.builder()
					.next(true).build());
			pc.addDwellingDetails(DwellingDetails.builder().build());
			pc.addDwellingConstructionDetails(DwellingConstruction.builder().build());
			pc.addCoverages(Coverages.builder(HomeOwnersConstants.PolicyType.NONE)
					.build());
			pc.addModifiersDetails();	
			pc.selectRiskAnalysis(RiskAnalysis.builder(RiskAnalysisType.NONE).build());
			pc.reviewPolicy(PolicyReview.builder(HomeOwnersConstants.PolicyReviewType.NONE).build());
			pc.viewQuote(Quote.builder().build());
			pc.viewForms(Quote.builder().build());
			pc.selectPayments(Payments.builder().build());
			pc.issuepolicy(HomeOwnersConstants.Transactions.SUBMISSION);
			pc.viewPolicy();

			Log.testCaseResult(driver);

		} catch (Exception e) {
			Log.exception(e, DriverManager.getDriver());
		}  finally {
			DriverManager.quitDriver(driver);
			Log.endTestCase();
		}
	}

	/**
	 * @author charu.anbarasan
	 * @param browser
	 * @throws Exception
	 */
	@Test(description="User able to Quote and Issue when secondary insurer is added in the Homeowners - Dwelling", dataProviderClass = DataProviderUtils.class, dataProvider = "parallelTestDataProvider")
	public void TC68(String browser) throws Exception {

		DriverManager.setDriver(browser);
		WebDriver driver = DriverManager.getDriver();
		Log.testCaseInfo("User able to Quote and Issue when secondary insurer is added in the Homeowners - Dwelling",driver);
		HomeOwnersDataEngine testData = new HomeOwnersDataEngine("GWTestData_DataEngine.xlsx", "HomeOwners", "TC68");

		try {	

			HomeOwnersStepsImpl pc = HomeOwnersSteps.create();

			pc.loginIntoTheApplication("su", "gw");

			pc.searchAccount(EnterAccountInformation.builder()
					.firstName(testData.getFirstName())
					.lastName(testData.getLastName()).build());

			pc.createAccount(CreateNewAccountFromPerson.builder()
					.firstName(testData.getFirstName())
					.lastName(testData.getLastName())
					.addressLine1(testData.getAddressLine1())
					.state(testData.getState())
					.city(testData.getCity())
					.zipCode(testData.getZipcode())
					.addressType(testData.getAddressType())
					.organization(testData.getProducerOrganization())
					.build());

			pc.selectProduct(ProductNames.HOME_OWNERS);

			pc.selectQualifications(Qualification.builder()

					.policyType(testData.getPolicyType())
					.coverageForm(testData.getCoverageForm())
					.dwellingOccupied(testData.getDwellingOccupied())
					.occupyDwellingFullTime(testData.getDwellingFullTime())
					.build());


			pc.updatePolicyInfo(PolicyInfo.builder()
					.policyEffectiveDate(testData.getCurrentDate())
					.policyTerm(testData.getPolicyTerm())
					.addSecondaryInsured(true)
					.createInsured(CreateNewAccountFromPerson.builder()
							.addSecondaryInsured(true)
							.firstName(testData.getFirstName())
							.lastName(testData.getLastName())
							.addressLine1(testData.getAddressLine1())
							.state(testData.getState())
							.city(testData.getCity())
							.zipCode(testData.getZipcode())
							.addressType(testData.getAddressType()).build())
					.build());

			pc.addDwellingDetails(DwellingDetails.builder().fireProtection(testData.getFireProtection()).build());

			pc.addDwellingConstructionDetails(DwellingConstruction.builder()
					.year(testData.getCurrentYear()).build());

			pc.addCoverages(Coverages.builder(HomeOwnersConstants.PolicyType.CONDOMINIUM)
					.coinsurance(testData.getCoInsurance())
					.covCLimit(testData.getCovCLimit())
					.valuationMethod(testData.getValuationMethod())
					.prohibitedUse(testData.getProhibitedUse())
					.lossOfRentalIncome(testData.getRentalIncome())
					.build());

			pc.addModifiersDetails();

			pc.selectRiskAnalysis(RiskAnalysis.builder(RiskAnalysisType.NONE).build());
			pc.reviewPolicy(PolicyReview.builder(HomeOwnersConstants.PolicyReviewType.NONE).build());
			pc.viewQuote(Quote.builder().build());
			pc.viewForms(Quote.builder().build());
			pc.selectPayments(Payments.builder().build());
			pc.issuepolicy(HomeOwnersConstants.Transactions.SUBMISSION);
			pc.viewPolicy();

			Log.testCaseResult(driver);

		} catch (Exception e) {
			Log.exception(e, DriverManager.getDriver());
		}  finally {
			DriverManager.quitDriver(driver);
			Log.endTestCase();
		}
	}

	/**
	 * @author charu.anbarasan
	 * @param browser
	 * @throws Exception
	 */
	@Test(description= "User able to Quote and Issue when Additional insurer is added in the Homeowners - Dwelling", dataProviderClass = DataProviderUtils.class, dataProvider = "parallelTestDataProvider")
	public void TC69(String browser) throws Exception {

		DriverManager.setDriver(browser);
		WebDriver driver = DriverManager.getDriver();
		Log.testCaseInfo("User able to Quote and Issue when Additional insurer is added in the Homeowners - Dwelling",driver);
		HomeOwnersDataEngine testData = new HomeOwnersDataEngine("GWTestData_DataEngine.xlsx", "HomeOwners", "TC69");

		try {	

			HomeOwnersStepsImpl pc = HomeOwnersSteps.create();

			pc.loginIntoTheApplication("su", "gw");

			pc.searchAccount(EnterAccountInformation.builder()
					.firstName(testData.getFirstName())
					.lastName(testData.getLastName()).build());

			pc.createAccount(CreateNewAccountFromPerson.builder()
					.firstName(testData.getFirstName())
					.lastName(testData.getLastName())
					.addressLine1(testData.getAddressLine1())
					.state(testData.getState())
					.city(testData.getCity())
					.zipCode(testData.getZipcode())
					.addressType(testData.getAddressType())
					.organization(testData.getProducerOrganization())
					.build());

			pc.selectProduct(ProductNames.HOME_OWNERS);

			pc.selectQualifications(Qualification.builder()

					.policyType(testData.getPolicyType())
					.coverageForm(testData.getCoverageForm())
					.dwellingOccupied(testData.getDwellingOccupied())
					.occupyDwellingFullTime(testData.getDwellingFullTime())
					.build());


			pc.updatePolicyInfo(PolicyInfo.builder()
					.policyEffectiveDate(testData.getCurrentDate())
					.policyTerm(testData.getPolicyTerm())
					.build());

			pc.addDwellingDetails(DwellingDetails.builder()
					.fireProtection(testData.getFireProtection())
					.addAdditionalInsured(true)
					.createInsured(CreateNewAccountFromPerson.builder()
							.addAdditionalInsured(true)
							.insuredType(InsuredType.HOMEOWNERS_ASSOCIATION)
							.firstName(testData.getFirstName())
							.lastName(testData.getLastName())
							.addressLine1(testData.getAddressLine1())
							.state(testData.getState())
							.city(testData.getCity())
							.zipCode(testData.getZipcode())
							.addressType(testData.getAddressType()).build())
					.build());


			pc.addDwellingConstructionDetails(DwellingConstruction.builder()
					.year(testData.getCurrentYear()).build());

			pc.addCoverages(Coverages.builder(HomeOwnersConstants.PolicyType.DWELLING)
					.coinsurance(testData.getCoInsurance())
					.prohibitedUse(testData.getProhibitedUse())
					.lossOfRentalIncome(testData.getRentalIncome())
					.build());

			pc.addModifiersDetails();

			pc.selectRiskAnalysis(RiskAnalysis.builder(RiskAnalysisType.NONE).build());
			pc.reviewPolicy(PolicyReview.builder(HomeOwnersConstants.PolicyReviewType.NONE).build());
			pc.viewQuote(Quote.builder().build());
			pc.viewForms(Quote.builder().build());
			pc.selectPayments(Payments.builder().build());
			pc.issuepolicy(HomeOwnersConstants.Transactions.SUBMISSION);
			pc.viewPolicy();

			Log.testCaseResult(driver);

		} catch (Exception e) {
			Log.exception(e, DriverManager.getDriver());
		}  finally {
			DriverManager.quitDriver(driver);
			Log.endTestCase();
		}
	}

	/**
	 * @author vignesh.ravi
	 * @param browser
	 * @throws Exception
	 */
	@Test(description="Verify whether user able to create a Rental policy", dataProviderClass = DataProviderUtils.class, dataProvider = "parallelTestDataProvider")
	public void TC97(String browser) throws Exception {

		DriverManager.setDriver(browser);
		WebDriver driver = DriverManager.getDriver();
		Log.testCaseInfo("Verify whether user able to create a Rental policy",driver);
		HomeOwnersDataEngine testData = new HomeOwnersDataEngine("GWTestData_DataEngine.xlsx", "HomeOwners", "TC97");

		try {	

			HomeOwnersStepsImpl pc = HomeOwnersSteps.create();

			pc.loginIntoTheApplication("su", "gw");

			pc.searchAccount(EnterAccountInformation.builder()
					.firstName(testData.getFirstName())
					.lastName(testData.getLastName()).build());

			pc.createAccount(CreateNewAccountFromPerson.builder()
					.firstName(testData.getFirstName())
					.lastName(testData.getLastName())
					.addressLine1(testData.getAddressLine1())
					.state(testData.getState())
					.city(testData.getCity())
					.zipCode(testData.getZipcode())
					.addressType(testData.getAddressType())
					.organization(testData.getProducerOrganization())
					.build());

			pc.selectProduct(ProductNames.HOME_OWNERS);

			pc.selectQualifications(Qualification.builder()

					.policyType(testData.getPolicyType())
					.coverageForm(testData.getCoverageForm())
					.dwellingOccupied(testData.getDwellingOccupied())
					.occupyDwellingFullTime(testData.getDwellingFullTime())
					.build());


			pc.updatePolicyInfo(PolicyInfo.builder()
					.policyEffectiveDate(testData.getCurrentDate())
					.policyTerm(testData.getPolicyTerm())
					.build());

			pc.addDwellingDetails(DwellingDetails.builder().fireProtection(testData.getFireProtection()).build());

			pc.addDwellingConstructionDetails(DwellingConstruction.builder()
					.year(testData.getCurrentYear()).build());

			pc.addCoverages(Coverages.builder(HomeOwnersConstants.PolicyType.RENTAL)
					.prohibitedUse(testData.getProhibitedUse())
					.valuationMethod(testData.getValuationMethod())
					.covCLimit(testData.getCovCLimit())
					.build());
			pc.addModifiersDetails();

			pc.selectRiskAnalysis(RiskAnalysis.builder(RiskAnalysisType.NONE).build());
			pc.reviewPolicy(PolicyReview.builder(HomeOwnersConstants.PolicyReviewType.NONE).build());
			pc.viewQuote(Quote.builder().build());
			pc.viewForms(Quote.builder().build());
			pc.selectPayments(Payments.builder().build());
			pc.issuepolicy(HomeOwnersConstants.Transactions.SUBMISSION);
			pc.viewPolicy();

			Log.testCaseResult(driver);

		} catch (Exception e) {
			Log.exception(e, DriverManager.getDriver());
		}  finally {

			DriverManager.quitDriver(driver);
			Log.endTestCase();
		}
	}
	/**
	 * @author vignesh.ravi
	 * @param browser
	 * @throws Exception
	 */
	@Test(description="User able to Quote and Issue - copy submission for Rental policy", dataProviderClass = DataProviderUtils.class, dataProvider = "parallelTestDataProvider")
	public void TC106(String browser) throws Exception {

		DriverManager.setDriver(browser);
		WebDriver driver = DriverManager.getDriver();
		Log.testCaseInfo("User able to Quote and Issue - copy submission for Rental policy",driver);
		HomeOwnersDataEngine testData = new HomeOwnersDataEngine("GWTestData_DataEngine.xlsx", "HomeOwners", "TC106");

		try {	

			HomeOwnersStepsImpl pc = HomeOwnersSteps.create();

			pc.loginIntoTheApplication("su", "gw");

			//Get policy number from Excel sheet which is generated by data generator using auto generated policy number created copy submission 

			pc.searchPolicyNumber(PolicyDetails.builder().policyNumber(testData.getPolicyNumber()).build());

			pc.copySubmission();

			pc.selectQualifications(Qualification.builder().build());
			pc.updatePolicyInfo(PolicyInfo.builder().build());
			pc.addDwellingDetails(DwellingDetails.builder().build());
			pc.addDwellingConstructionDetails(DwellingConstruction.builder().build());
			pc.addCoverages(Coverages.builder(HomeOwnersConstants.PolicyType.NONE)
					.build());
			pc.addModifiersDetails();	
			pc.selectRiskAnalysis(RiskAnalysis.builder(RiskAnalysisType.NONE).build());
			pc.reviewPolicy(PolicyReview.builder(HomeOwnersConstants.PolicyReviewType.NONE).build());
			pc.viewQuote(Quote.builder().build());
			pc.viewForms(Quote.builder().build());
			pc.selectPayments(Payments.builder().build());
			pc.issuepolicy(HomeOwnersConstants.Transactions.SUBMISSION);
			pc.viewPolicy();

			Log.testCaseResult(driver);

		} catch (Exception e) {
			Log.exception(e, DriverManager.getDriver());
		}  finally {

			DriverManager.quitDriver(driver);
			Log.endTestCase();
		}
	}
	/**
	 * @author vignesh.ravi
	 * @param browser
	 * @throws Exception
	 */
	@Test(description="user able to Quote and Issue - Decline Submission transaction for Rental policy.", dataProviderClass = DataProviderUtils.class, dataProvider = "parallelTestDataProvider")
	public void TC108(String browser) throws Exception {

		DriverManager.setDriver(browser);
		WebDriver driver = DriverManager.getDriver();
		Log.testCaseInfo("user able to Quote and Issue - Decline Submission transaction for Rental policy.",driver);
		HomeOwnersDataEngine testData = new HomeOwnersDataEngine("GWTestData_DataEngine.xlsx", "HomeOwners", "TC108");

		try {	

			HomeOwnersStepsImpl pc = HomeOwnersSteps.create();

			pc.loginIntoTheApplication("su", "gw");

			pc.searchAccount(EnterAccountInformation.builder()
					.firstName(testData.getFirstName())
					.lastName(testData.getLastName()).build());

			pc.createAccount(CreateNewAccountFromPerson.builder()
					.firstName(testData.getFirstName())
					.lastName(testData.getLastName())
					.addressLine1(testData.getAddressLine1())
					.state(testData.getState())
					.city(testData.getCity())
					.zipCode(testData.getZipcode())
					.addressType(testData.getAddressType())
					.organization(testData.getProducerOrganization())
					.build());

			pc.selectProduct(ProductNames.HOME_OWNERS);

			pc.selectQualifications(Qualification.builder()

					.policyType(testData.getPolicyType())
					.coverageForm(testData.getCoverageForm())
					.dwellingOccupied(testData.getDwellingOccupied())
					.occupyDwellingFullTime(testData.getDwellingFullTime())
					.build());


			pc.updatePolicyInfo(PolicyInfo.builder()
					.policyEffectiveDate(testData.getCurrentDate())
					.policyTerm(testData.getPolicyTerm())
					.build());

			pc.addDwellingDetails(DwellingDetails.builder().fireProtection(testData.getFireProtection()).build());

			pc.addDwellingConstructionDetails(DwellingConstruction.builder()
					.year(testData.getCurrentYear()).build());

			pc.addCoverages(Coverages.builder(HomeOwnersConstants.PolicyType.RENTAL)
					.prohibitedUse(testData.getProhibitedUse())
					.valuationMethod(testData.getValuationMethod())
					.covCLimit(testData.getCovCLimit())
					.build());

			pc.addModifiersDetails();

			pc.selectRiskAnalysis(RiskAnalysis.builder(RiskAnalysisType.NONE).build());
			pc.reviewPolicy(PolicyReview.builder(HomeOwnersConstants.PolicyReviewType.NONE).build());
			pc.viewQuote(Quote.builder().build());
			pc.viewForms(Quote.builder().build());
			pc.selectPayments(Payments.builder().build());
			pc.policyCloseOptions(CloseOptions.builder(HomeOwnersConstants.CloseOptionType.DECLINE)
					.reasonDeclined(testData.getReasonDeclined()).build());

			Log.testCaseResult(driver);

		} catch (Exception e) {
			Log.exception(e, DriverManager.getDriver());
		}  finally {

			DriverManager.quitDriver(driver);
			Log.endTestCase();
		}
	}
	/**
	 * @author vignesh.ravi
	 * @param browser
	 * @throws Exception
	 */
	@Test(description="user able to make Policy pro rata cancellation transaction for Rental policy.", dataProviderClass = DataProviderUtils.class, dataProvider = "parallelTestDataProvider")
	public void TC100(String browser) throws Exception {

		DriverManager.setDriver(browser);
		WebDriver driver = DriverManager.getDriver();
		Log.testCaseInfo("user able to make Policy pro rata cancellation transaction for Rental policy.",driver);
		HomeOwnersDataEngine testData = new HomeOwnersDataEngine("GWTestData_DataEngine.xlsx", "HomeOwners", "TC100");

		try {	

			HomeOwnersStepsImpl pc = HomeOwnersSteps.create();

			pc.loginIntoTheApplication("su", "gw");

			//Get policy number from Excel sheet which is generated by data generator using auto generated policy number created copy submission 

			pc.searchPolicyNumber(PolicyDetails.builder().policyNumber(testData.getPolicyNumber()).build());

			pc.copySubmissions();

			pc.viewPolicy();

			pc.cancelPolicy(CancellationSource.builder().source(testData.getSource())
					.reason(testData.getReason()).build());
			pc.viewPolicy();

			Log.testCaseResult(driver);

		} catch (Exception e) {
			Log.exception(e, DriverManager.getDriver());
		}  finally {

			DriverManager.quitDriver(driver);
			Log.endTestCase();
		}
	}
	/**
	 * @author vignesh.ravi
	 * @param browser
	 * @throws Exception
	 */
	@Test(description="user able to Quote and Issue - Reinstatement transaction for Rental policy", dataProviderClass = DataProviderUtils.class, dataProvider = "parallelTestDataProvider")
	public void TC101(String browser) throws Exception {

		DriverManager.setDriver(browser);
		WebDriver driver = DriverManager.getDriver();
		Log.testCaseInfo("user able to Quote and Issue - Reinstatement transaction for Rental policy",driver);
		HomeOwnersDataEngine testData = new HomeOwnersDataEngine("GWTestData_DataEngine.xlsx", "HomeOwners", "TC101");

		try {	

			HomeOwnersStepsImpl pc = HomeOwnersSteps.create();

			pc.loginIntoTheApplication("su", "gw");

			//Get policy number from Excel sheet which is generated by data generator using auto generated policy number created copy submission 

			pc.searchPolicyNumber(PolicyDetails.builder().policyNumber(testData.getPolicyNumber()).build());

			pc.copySubmissions();

			pc.viewPolicy();

			pc.cancelPolicy(CancellationSource.builder().source(testData.getSource())
					.reason(testData.getReason()).build());

			pc.viewPolicy();

			pc.reinstatePolicy(ReinstatementReason.builder().reason(testData.getReinstateReason()).build());

			pc.viewPolicy();

			Log.testCaseResult(driver);

		} catch (Exception e) {
			Log.exception(e, DriverManager.getDriver());
		}  finally {

			DriverManager.quitDriver(driver);
			Log.endTestCase();
		}
	}
	/**
	 * @author vignesh.ravi
	 * @param browser
	 * @throws Exception
	 */
	@Test(description="user able to Quote and Issue - Rewrite remainder of term transaction for Rental policy", dataProviderClass = DataProviderUtils.class, dataProvider = "parallelTestDataProvider")
	public void TC103(String browser) throws Exception {

		DriverManager.setDriver(browser);
		WebDriver driver = DriverManager.getDriver();
		Log.testCaseInfo("user able to Quote and Issue - Rewrite remainder of term transaction for Rental policy.",driver);
		HomeOwnersDataEngine testData = new HomeOwnersDataEngine("GWTestData_DataEngine.xlsx", "HomeOwners", "TC103");

		try {	

			HomeOwnersStepsImpl pc = HomeOwnersSteps.create();

			pc.loginIntoTheApplication("su", "gw");

			//Get policy number from Excel sheet which is generated by data generator using auto generated policy number created copy submission 

			pc.searchPolicyNumber(PolicyDetails.builder().policyNumber(testData.getPolicyNumber()).build());

			pc.copySubmissions();

			pc.viewPolicy();

			pc.cancelPolicy(CancellationSource.builder().source(testData.getSource())
					.reason(testData.getReason()).build());
			pc.viewPolicy();

			pc.policyRewriteRemainderTerm();

			pc.updatePolicyInfo(PolicyInfo.builder().build());
			pc.addDwellingDetails(DwellingDetails.builder().fireProtection(testData.getFireProtection()).build());
			pc.addDwellingConstructionDetails(DwellingConstruction.builder()
					.year(testData.getCurrentYear()).build());
			pc.addCoverages(Coverages.builder(HomeOwnersConstants.PolicyType.NONE).build());
			pc.addModifiersDetails();
			pc.selectRiskAnalysis(RiskAnalysis.builder(RiskAnalysisType.NONE).build());
			pc.reviewPolicy(PolicyReview.builder(HomeOwnersConstants.PolicyReviewType.NONE).build());
			pc.viewQuote(Quote.builder().build());
			pc.issuepolicy(HomeOwnersConstants.Transactions.REWRITE_REMAINDER_TERM);
			pc.viewPolicy();

			Log.testCaseResult(driver);

		} catch (Exception e) {
			Log.exception(e, DriverManager.getDriver());
		}  finally {

			DriverManager.quitDriver(driver);
			Log.endTestCase();
		}
	}
	/**
	 * @author vignesh.ravi
	 * @param browser
	 * @throws Exception
	 */
	@Test(description="user able to Quote and Issue - Not taken Submission transaction for Rental policy.", dataProviderClass = DataProviderUtils.class, dataProvider = "parallelTestDataProvider")
	public void TC107(String browser) throws Exception {

		DriverManager.setDriver(browser);
		WebDriver driver = DriverManager.getDriver();
		Log.testCaseInfo("user able to Quote and Issue - Not taken Submission transaction for Rental policy.",driver);
		HomeOwnersDataEngine testData = new HomeOwnersDataEngine("GWTestData_DataEngine.xlsx", "HomeOwners", "TC107");

		try {	

			HomeOwnersStepsImpl pc = HomeOwnersSteps.create();

			pc.loginIntoTheApplication("su", "gw");

			pc.searchAccount(EnterAccountInformation.builder()
					.firstName(testData.getFirstName())
					.lastName(testData.getLastName()).build());

			pc.createAccount(CreateNewAccountFromPerson.builder()
					.firstName(testData.getFirstName())
					.lastName(testData.getLastName())
					.addressLine1(testData.getAddressLine1())
					.state(testData.getState())
					.city(testData.getCity())
					.zipCode(testData.getZipcode())
					.addressType(testData.getAddressType())
					.organization(testData.getProducerOrganization())
					.build());

			pc.selectProduct(ProductNames.HOME_OWNERS);

			pc.selectQualifications(Qualification.builder()

					.policyType(testData.getPolicyType())
					.coverageForm(testData.getCoverageForm())
					.dwellingOccupied(testData.getDwellingOccupied())
					.occupyDwellingFullTime(testData.getDwellingFullTime())
					.build());


			pc.updatePolicyInfo(PolicyInfo.builder()
					.policyEffectiveDate(testData.getCurrentDate())
					.policyTerm(testData.getPolicyTerm())
					.build());

			pc.addDwellingDetails(DwellingDetails.builder().fireProtection(testData.getFireProtection()).build());

			pc.addDwellingConstructionDetails(DwellingConstruction.builder()
					.year(testData.getCurrentYear()).build());

			pc.addCoverages(Coverages.builder(HomeOwnersConstants.PolicyType.RENTAL)
					.prohibitedUse(testData.getProhibitedUse())
					.valuationMethod(testData.getValuationMethod())
					.covCLimit(testData.getCovCLimit())
					.build());

			pc.addModifiersDetails();

			pc.selectRiskAnalysis(RiskAnalysis.builder(RiskAnalysisType.NONE).build());
			pc.reviewPolicy(PolicyReview.builder(HomeOwnersConstants.PolicyReviewType.NONE).build());
			pc.viewQuote(Quote.builder().build());
			pc.viewForms(Quote.builder().build());
			pc.selectPayments(Payments.builder().build());
			pc.policyCloseOptions(CloseOptions.builder(HomeOwnersConstants.CloseOptionType.NOT_TAKEN)
					.reasonNotTaken(testData.getReasonNotTaken()).build());

			Log.testCaseResult(driver);

		} catch (Exception e) {
			Log.exception(e, DriverManager.getDriver());
		}  finally {
			DriverManager.quitDriver(driver);
			Log.endTestCase();
		}
	}

	/**
	 * @author vignesh.ravi
	 * @param browser
	 * @throws Exception
	 */
	@Test(description="user able to Quote and Issue - Withdraw Submission transaction for Rental policy", dataProviderClass = DataProviderUtils.class, dataProvider = "parallelTestDataProvider")
	public void TC109(String browser) throws Exception {

		DriverManager.setDriver(browser);
		WebDriver driver = DriverManager.getDriver();
		Log.testCaseInfo(" user able to Quote and Issue - Withdraw Submission transaction for Rental policy.",driver);
		HomeOwnersDataEngine testData = new HomeOwnersDataEngine("GWTestData_DataEngine.xlsx", "HomeOwners", "TC109");

		try {	

			HomeOwnersStepsImpl pc = HomeOwnersSteps.create();

			pc.loginIntoTheApplication("su", "gw");

			pc.searchAccount(EnterAccountInformation.builder()
					.firstName(testData.getFirstName())
					.lastName(testData.getLastName()).build());

			pc.createAccount(CreateNewAccountFromPerson.builder()
					.firstName(testData.getFirstName())
					.lastName(testData.getLastName())
					.addressLine1(testData.getAddressLine1())
					.state(testData.getState())
					.city(testData.getCity())
					.zipCode(testData.getZipcode())
					.addressType(testData.getAddressType())
					.organization(testData.getProducerOrganization())
					.build());

			pc.selectProduct(ProductNames.HOME_OWNERS);

			pc.selectQualifications(Qualification.builder()

					.policyType(testData.getPolicyType())
					.coverageForm(testData.getCoverageForm())
					.dwellingOccupied(testData.getDwellingOccupied())
					.occupyDwellingFullTime(testData.getDwellingFullTime())
					.build());


			pc.updatePolicyInfo(PolicyInfo.builder()
					.policyEffectiveDate(testData.getCurrentDate())
					.policyTerm(testData.getPolicyTerm())
					.build());

			pc.addDwellingDetails(DwellingDetails.builder().fireProtection(testData.getFireProtection()).build());

			pc.addDwellingConstructionDetails(DwellingConstruction.builder()
					.year(testData.getCurrentYear()).build());

			pc.addCoverages(Coverages.builder(HomeOwnersConstants.PolicyType.RENTAL)
					.prohibitedUse(testData.getProhibitedUse())
					.valuationMethod(testData.getValuationMethod())
					.covCLimit(testData.getCovCLimit())
					.build());

			pc.addModifiersDetails();

			pc.selectRiskAnalysis(RiskAnalysis.builder(RiskAnalysisType.NONE).build());
			pc.reviewPolicy(PolicyReview.builder(HomeOwnersConstants.PolicyReviewType.NONE).build());
			pc.viewQuote(Quote.builder().build());
			pc.viewForms(Quote.builder().build());
			pc.selectPayments(Payments.builder().build());
			pc.policyCloseOptions(CloseOptions.builder(HomeOwnersConstants.CloseOptionType.WITHDRAW_TRANSACTION)
					.build());

			Log.testCaseResult(driver);

		} catch (Exception e) {
			Log.exception(e, DriverManager.getDriver());
		}  finally {
			DriverManager.quitDriver(driver);
			Log.endTestCase();
		}
	}

	/**
	 * @author vignesh.ravi
	 * @param browser
	 * @throws Exception
	 */
	@Test(description="user able to Quote and Issue - Rewrite full term transaction for Rental policy.", dataProviderClass = DataProviderUtils.class, dataProvider = "parallelTestDataProvider")
	public void TC102(String browser) throws Exception {

		DriverManager.setDriver(browser);
		WebDriver driver = DriverManager.getDriver();
		Log.testCaseInfo("user able to Quote and Issue - Rewrite full term transaction for Rental policy.",driver);
		HomeOwnersDataEngine testData = new HomeOwnersDataEngine("GWTestData_DataEngine.xlsx", "HomeOwners", "TC102");

		try {	

			HomeOwnersStepsImpl pc = HomeOwnersSteps.create();

			pc.loginIntoTheApplication("su", "gw");

			//Get policy number from Excel sheet which is generated by data generator using auto generated policy number created copy submission 

			pc.searchPolicyNumber(PolicyDetails.builder().policyNumber(testData.getPolicyNumber()).build());

			pc.copySubmissions();

			pc.viewPolicy();

			pc.cancelPolicy(CancellationSource.builder().source(testData.getSource())
					.reason(testData.getReason()).build());
			pc.viewPolicy();

			pc.policyRewriteFullTerm();

			pc.updatePolicyInfo(PolicyInfo.builder().build());
			pc.addDwellingDetails(DwellingDetails.builder().fireProtection(testData.getFireProtection()).build());
			pc.addDwellingConstructionDetails(DwellingConstruction.builder()
					.year(testData.getCurrentYear()).build());
			pc.addCoverages(Coverages.builder(HomeOwnersConstants.PolicyType.NONE)
					.build());
			pc.addModifiersDetails();
			pc.selectRiskAnalysis(RiskAnalysis.builder(RiskAnalysisType.NONE).build());
			pc.reviewPolicy(PolicyReview.builder(HomeOwnersConstants.PolicyReviewType.NONE).build());
			pc.viewQuote(Quote.builder().build());
			pc.issuepolicy(HomeOwnersConstants.Transactions.REWRITE_REMAINDER_TERM);
			pc.viewPolicy();

		} catch (Exception e) {
			Log.exception(e, DriverManager.getDriver());
		}  finally {

			DriverManager.quitDriver(driver);
			Log.endTestCase();
		}
	}
	/**
	 * @author vignesh.ravi
	 * @param browser
	 * @throws Exception
	 */
	@Test(description="user able to make Policy flat cancellation transaction for Rental policy.", dataProviderClass = DataProviderUtils.class, dataProvider = "parallelTestDataProvider")
	public void TC99(String browser) throws Exception {

		DriverManager.setDriver(browser);
		WebDriver driver = DriverManager.getDriver();
		Log.testCaseInfo("user able to make Policy flat cancellation transaction for Rental policy.",driver);
		HomeOwnersDataEngine testData = new HomeOwnersDataEngine("GWTestData_DataEngine.xlsx", "HomeOwners", "TC99");

		try {	

			HomeOwnersStepsImpl pc = HomeOwnersSteps.create();

			pc.loginIntoTheApplication("su", "gw");

			//Get policy number from Excel sheet which is generated by data generator using auto generated policy number created copy submission 

			pc.searchPolicyNumber(PolicyDetails.builder().policyNumber(testData.getPolicyNumber()).build());

			pc.copySubmissions();

			pc.viewPolicy();

			pc.cancelPolicy(CancellationSource.builder().source(testData.getSource())
					.reason(testData.getReason()).build());

			pc.viewPolicy();

			Log.testCaseResult(driver);

		} catch (Exception e) {
			Log.exception(e, DriverManager.getDriver());
		}  finally {
			DriverManager.quitDriver(driver);
			Log.endTestCase();
		}
	}
	/**
	 * @author vignesh.ravi
	 * @param browser
	 * @throws Exception
	 */
	@Test(description="Verify whether user able to Quote and Issue - Renewal transaction for Rental policy.", dataProviderClass = DataProviderUtils.class, dataProvider = "parallelTestDataProvider")
	public void TC105(String browser) throws Exception {

		DriverManager.setDriver(browser);
		WebDriver driver = DriverManager.getDriver();
		Log.testCaseInfo("Verify whether user able to Quote and Issue - Renewal transaction for Rental policy.",driver);
		HomeOwnersDataEngine testData = new HomeOwnersDataEngine("GWTestData_DataEngine.xlsx", "HomeOwners", "TC105");

		try {	

			HomeOwnersStepsImpl pc = HomeOwnersSteps.create();

			pc.loginIntoTheApplication("su", "gw");

			//Get policy number from Excel sheet which is generated by data generator using auto generated policy number created copy submission 

			pc.searchPolicyNumber(PolicyDetails.builder().policyNumber(testData.getPolicyNumber()).build());

			pc.copySubmissions();

			pc.viewPolicy();

			pc.policyRenew();

			pc.updatePolicyInfo(PolicyInfo.builder(). build());
			pc.addDwellingDetails(DwellingDetails.builder().build());
			pc.addDwellingConstructionDetails(DwellingConstruction.builder().build());
			pc.addCoverages(Coverages.builder(HomeOwnersConstants.PolicyType.NONE).build());
			pc.addModifiersDetails();
			pc.selectRiskAnalysis(RiskAnalysis.builder(RiskAnalysisType.NONE).build());
			pc.reviewPolicy(PolicyReview.builder(HomeOwnersConstants.PolicyReviewType.RENEW).build());
			pc.viewQuote(Quote.builder().build());
			pc.viewForms(Quote.builder().build());
			pc.issuepolicy(HomeOwnersConstants.Transactions.RENEW_POLICY);
			pc.policyRenewal(RenewPolicy.builder().renewalcode(testData.getRenewalCode()).build());
			pc.viewPolicy();

			Log.testCaseResult(driver);

		} catch (Exception e) {
			Log.exception(e, DriverManager.getDriver());
		}  finally {
			DriverManager.quitDriver(driver);
			Log.endTestCase();
		}
	}

	/**
	 * @author charu.anbarasan
	 * @param browser
	 * @throws Exception
	 */
	@Test(description="User able to Quote and Issue when Additional Interests - second Mortgagee is added in the Homeowners - Dwelling", dataProviderClass = DataProviderUtils.class, dataProvider = "parallelTestDataProvider")
	public void TC72(String browser) throws Exception {

		DriverManager.setDriver(browser);
		WebDriver driver = DriverManager.getDriver();
		Log.testCaseInfo("User able to Quote and Issue when Additional Interests - second Mortgagee is added in the Homeowners - Dwelling",driver);
		HomeOwnersDataEngine testData = new HomeOwnersDataEngine("GWTestData_DataEngine.xlsx", "HomeOwners", "TC72");

		try {	

			HomeOwnersStepsImpl pc = HomeOwnersSteps.create();

			pc.loginIntoTheApplication("su", "gw");

			pc.searchAccount(EnterAccountInformation.builder()
					.firstName(testData.getFirstName())
					.lastName(testData.getLastName()).build());

			pc.createAccount(CreateNewAccountFromPerson.builder()
					.firstName(testData.getFirstName())
					.lastName(testData.getLastName())
					.addressLine1(testData.getAddressLine1())
					.state(testData.getState())
					.city(testData.getCity())
					.zipCode(testData.getZipcode())
					.addressType(testData.getAddressType())
					.organization(testData.getProducerOrganization())
					.build());

			pc.selectProduct(ProductNames.HOME_OWNERS);

			pc.selectQualifications(Qualification.builder()

					.policyType(testData.getPolicyType())
					.coverageForm(testData.getCoverageForm())
					.dwellingOccupied(testData.getDwellingOccupied())
					.occupyDwellingFullTime(testData.getDwellingFullTime())
					.build());


			pc.updatePolicyInfo(PolicyInfo.builder()
					.policyEffectiveDate(testData.getCurrentDate())
					.policyTerm(testData.getPolicyTerm())
					.build());

			pc.addDwellingDetails(DwellingDetails.builder()
					.fireProtection(testData.getFireProtection())
					.addAdditionalInterest(true)
					.createInterest(AdditionalInterestFromPerson.builder()
							.interestType(InterestType.SECOND_MORTGAGE)
							.firstName(testData.getFirstName())
							.lastName(testData.getLastName())
							.addressLine1(testData.getAddressLine1())
							.state(testData.getState())
							.city(testData.getCity())
							.zipCode(testData.getZipcode())
							.addressType(testData.getAddressType()).build())
					.build());


			pc.addDwellingConstructionDetails(DwellingConstruction.builder()
					.year(testData.getCurrentYear()).build());

			pc.addCoverages(Coverages.builder(HomeOwnersConstants.PolicyType.DWELLING)
					.coinsurance(testData.getCoInsurance())
					.prohibitedUse(testData.getProhibitedUse())
					.lossOfRentalIncome(testData.getRentalIncome())
					.build());
			pc.addModifiersDetails();

			pc.selectRiskAnalysis(RiskAnalysis.builder(RiskAnalysisType.NONE).build());
			pc.reviewPolicy(PolicyReview.builder(HomeOwnersConstants.PolicyReviewType.NONE).build());
			pc.viewQuote(Quote.builder().build());
			pc.viewForms(Quote.builder().build());
			pc.selectPayments(Payments.builder().build());
			pc.issuepolicy(HomeOwnersConstants.Transactions.SUBMISSION);
			pc.viewPolicy();

			Log.testCaseResult(driver);

		} catch (Exception e) {
			Log.exception(e, DriverManager.getDriver());
		}  finally {

			DriverManager.quitDriver(driver);
			Log.endTestCase();
		}
	}
	/**
	 * @author charu.anbarasan
	 * @param browser
	 * @throws Exception
	 */
	@Test(description= "User able to Quote and Issue when Additional Interests - First Mortgagee is added in the Homeowners - Dwelling", dataProviderClass = DataProviderUtils.class, dataProvider = "parallelTestDataProvider")
	public void TC70(String browser) throws Exception {

		DriverManager.setDriver(browser);
		WebDriver driver = DriverManager.getDriver();
		Log.testCaseInfo("User able to Quote and Issue when Additional Interests - First Mortgagee is added in the Homeowners - Dwelling",driver);
		HomeOwnersDataEngine testData = new HomeOwnersDataEngine("GWTestData_DataEngine.xlsx", "HomeOwners", "TC70");

		try {	

			HomeOwnersStepsImpl pc = HomeOwnersSteps.create();

			pc.loginIntoTheApplication("su", "gw");

			pc.searchAccount(EnterAccountInformation.builder()
					.firstName(testData.getFirstName())
					.lastName(testData.getLastName()).build());

			pc.createAccount(CreateNewAccountFromPerson.builder()
					.firstName(testData.getFirstName())
					.lastName(testData.getLastName())
					.addressLine1(testData.getAddressLine1())
					.state(testData.getState())
					.city(testData.getCity())
					.zipCode(testData.getZipcode())
					.addressType(testData.getAddressType())
					.organization(testData.getProducerOrganization())
					.build());

			pc.selectProduct(ProductNames.HOME_OWNERS);

			pc.selectQualifications(Qualification.builder()

					.policyType(testData.getPolicyType())
					.coverageForm(testData.getCoverageForm())
					.dwellingOccupied(testData.getDwellingOccupied())
					.occupyDwellingFullTime(testData.getDwellingFullTime())
					.build());


			pc.updatePolicyInfo(PolicyInfo.builder()
					.policyEffectiveDate(testData.getCurrentDate())
					.policyTerm(testData.getPolicyTerm())
					.build());

			pc.addDwellingDetails(DwellingDetails.builder()
					.fireProtection(testData.getFireProtection())
					.addAdditionalInterest(true)
					.createInterest(AdditionalInterestFromPerson.builder()
							.interestType(InterestType.FIRST_MORTGAGE)
							.firstName(testData.getFirstName())
							.lastName(testData.getLastName())
							.addressLine1(testData.getAddressLine1())
							.state(testData.getState())
							.city(testData.getCity())
							.zipCode(testData.getZipcode())
							.addressType(testData.getAddressType()).build())
					.build());


			pc.addDwellingConstructionDetails(DwellingConstruction.builder()
					.year(testData.getCurrentYear()).build());

			pc.addCoverages(Coverages.builder(HomeOwnersConstants.PolicyType.DWELLING)
					.coinsurance(testData.getCoInsurance())
					.prohibitedUse(testData.getProhibitedUse())
					.lossOfRentalIncome(testData.getRentalIncome())
					.build());
			pc.addModifiersDetails();

			pc.selectRiskAnalysis(RiskAnalysis.builder(RiskAnalysisType.NONE).build());
			pc.reviewPolicy(PolicyReview.builder(HomeOwnersConstants.PolicyReviewType.NONE).build());
			pc.viewQuote(Quote.builder().build());
			pc.viewForms(Quote.builder().build());
			pc.selectPayments(Payments.builder().build());
			pc.issuepolicy(HomeOwnersConstants.Transactions.SUBMISSION);
			pc.viewPolicy();

			Log.testCaseResult(driver);

		} catch (Exception e) {
			Log.exception(e, DriverManager.getDriver());
		}  finally {
			DriverManager.quitDriver(driver);
			Log.endTestCase();
		}
	}

	/**
	 * @author charu.anbarasan
	 * @param browser
	 * @throws Exception
	 */
	@Test(description= "User able to Quote and Issue when Additional Interests - Third party is added in the Homeowners - Dwelling", dataProviderClass = DataProviderUtils.class, dataProvider = "parallelTestDataProvider")
	public void TC71(String browser) throws Exception {

		DriverManager.setDriver(browser);
		WebDriver driver = DriverManager.getDriver();
		Log.testCaseInfo("User able to Quote and Issue when Additional Interests - Third party is added in the Homeowners - Dwelling",driver);
		HomeOwnersDataEngine testData = new HomeOwnersDataEngine("GWTestData_DataEngine.xlsx", "HomeOwners", "TC71");

		try {	

			HomeOwnersStepsImpl pc = HomeOwnersSteps.create();

			pc.loginIntoTheApplication("su", "gw");

			pc.searchAccount(EnterAccountInformation.builder()
					.firstName(testData.getFirstName())
					.lastName(testData.getLastName()).build());

			pc.createAccount(CreateNewAccountFromPerson.builder()
					.firstName(testData.getFirstName())
					.lastName(testData.getLastName())
					.addressLine1(testData.getAddressLine1())
					.state(testData.getState())
					.city(testData.getCity())
					.zipCode(testData.getZipcode())
					.addressType(testData.getAddressType())
					.organization(testData.getProducerOrganization())
					.build());

			pc.selectProduct(ProductNames.HOME_OWNERS);

			pc.selectQualifications(Qualification.builder()

					.policyType(testData.getPolicyType())
					.coverageForm(testData.getCoverageForm())
					.dwellingOccupied(testData.getDwellingOccupied())
					.occupyDwellingFullTime(testData.getDwellingFullTime())
					.build());


			pc.updatePolicyInfo(PolicyInfo.builder()
					.policyEffectiveDate(testData.getCurrentDate())
					.policyTerm(testData.getPolicyTerm())
					.build());

			pc.addDwellingDetails(DwellingDetails.builder()
					.fireProtection(testData.getFireProtection())
					.addAdditionalInterest(true)
					.createInterest(AdditionalInterestFromPerson.builder()
							.interestType(InterestType.THIRD_PARTY_DESIGNEE)
							.firstName(testData.getFirstName())
							.lastName(testData.getLastName())
							.addressLine1(testData.getAddressLine1())
							.state(testData.getState())
							.city(testData.getCity())
							.zipCode(testData.getZipcode())
							.addressType(testData.getAddressType()).build())
					.build());


			pc.addDwellingConstructionDetails(DwellingConstruction.builder()
					.year(testData.getCurrentYear()).build());

			pc.addCoverages(Coverages.builder(HomeOwnersConstants.PolicyType.DWELLING)
					.coinsurance(testData.getCoInsurance())
					.prohibitedUse(testData.getProhibitedUse())
					.lossOfRentalIncome(testData.getRentalIncome())
					.build());
			pc.addModifiersDetails();

			pc.selectRiskAnalysis(RiskAnalysis.builder(RiskAnalysisType.NONE).build());
			pc.reviewPolicy(PolicyReview.builder(HomeOwnersConstants.PolicyReviewType.NONE).build());
			pc.viewQuote(Quote.builder().build());
			pc.viewForms(Quote.builder().build());
			pc.selectPayments(Payments.builder().build());
			pc.issuepolicy(HomeOwnersConstants.Transactions.SUBMISSION);
			pc.viewPolicy();

			Log.testCaseResult(driver);

		} catch (Exception e) {
			Log.exception(e, DriverManager.getDriver());
		}  finally {
			DriverManager.quitDriver(driver);
			Log.endTestCase();
		}
	}

	/**
	 * @author charu.anbarasan
	 * @param browser
	 * @throws Exception
	 */
	@Test(description="User able to Quote and Issue when Additional Interests - Third party Mortgagee is added in the Homeowners - Dwelling", dataProviderClass = DataProviderUtils.class, dataProvider = "parallelTestDataProvider")
	public void TC73(String browser) throws Exception {

		DriverManager.setDriver(browser);
		WebDriver driver = DriverManager.getDriver();
		Log.testCaseInfo("User able to Quote and Issue when Additional Interests - Third party Mortgagee is added in the Homeowners - Dwelling",driver);
		HomeOwnersDataEngine testData = new HomeOwnersDataEngine("GWTestData_DataEngine.xlsx", "HomeOwners", "TC73");

		try {	

			HomeOwnersStepsImpl pc = HomeOwnersSteps.create();

			pc.loginIntoTheApplication("su", "gw");

			pc.searchAccount(EnterAccountInformation.builder()
					.firstName(testData.getFirstName())
					.lastName(testData.getLastName()).build());

			pc.createAccount(CreateNewAccountFromPerson.builder()
					.firstName(testData.getFirstName())
					.lastName(testData.getLastName())
					.addressLine1(testData.getAddressLine1())
					.state(testData.getState())
					.city(testData.getCity())
					.zipCode(testData.getZipcode())
					.addressType(testData.getAddressType())
					.organization(testData.getProducerOrganization())
					.build());

			pc.selectProduct(ProductNames.HOME_OWNERS);

			pc.selectQualifications(Qualification.builder()

					.policyType(testData.getPolicyType())
					.coverageForm(testData.getCoverageForm())
					.dwellingOccupied(testData.getDwellingOccupied())
					.occupyDwellingFullTime(testData.getDwellingFullTime())
					.build());

			pc.updatePolicyInfo(PolicyInfo.builder()
					.policyEffectiveDate(testData.getCurrentDate())
					.policyTerm(testData.getPolicyTerm())
					.build());

			pc.addDwellingDetails(DwellingDetails.builder()
					.fireProtection(testData.getFireProtection())
					.addAdditionalInterest(true)
					.createInterest(AdditionalInterestFromPerson.builder()
							.interestType(InterestType.THIRD_MORTGAGE)
							.firstName(testData.getFirstName())
							.lastName(testData.getLastName())
							.addressLine1(testData.getAddressLine1())
							.state(testData.getState())
							.city(testData.getCity())
							.zipCode(testData.getZipcode())
							.addressType(testData.getAddressType()).build())
					.build());

			pc.addDwellingConstructionDetails(DwellingConstruction.builder()
					.year(testData.getCurrentYear()).build());

			pc.addCoverages(Coverages.builder(HomeOwnersConstants.PolicyType.DWELLING)
					.coinsurance(testData.getCoInsurance())
					.prohibitedUse(testData.getProhibitedUse())
					.lossOfRentalIncome(testData.getRentalIncome())
					.build());

			pc.addModifiersDetails();

			pc.selectRiskAnalysis(RiskAnalysis.builder(RiskAnalysisType.NONE).build());
			pc.reviewPolicy(PolicyReview.builder(HomeOwnersConstants.PolicyReviewType.NONE).build());
			pc.viewQuote(Quote.builder().build());
			pc.viewForms(Quote.builder().build());
			pc.selectPayments(Payments.builder().build());
			pc.issuepolicy(HomeOwnersConstants.Transactions.SUBMISSION);
			pc.viewPolicy();

			Log.testCaseResult(driver);

		} catch (Exception e) {
			Log.exception(e, DriverManager.getDriver());
		}  finally {
			DriverManager.quitDriver(driver);
			Log.endTestCase();
		}
	}

	/**
	 * @author charu.anbarasan
	 * @param browser
	 * @throws Exception
	 */
	@Test(description = "Verify whether User able to Quote and Issue when Additional Interests - First Mortgagee is added in the Homeowners - Condominium", dataProviderClass = DataProviderUtils.class, dataProvider = "parallelTestDataProvider")
	public void TC93(String browser) throws Exception {

		DriverManager.setDriver(browser);
		WebDriver driver = DriverManager.getDriver();
		Log.testCaseInfo("Verify whether User able to Quote and Issue when Additional Interests - First Mortgagee is added in the Homeowners - Condominium",driver);
		HomeOwnersDataEngine testData = new HomeOwnersDataEngine("GWTestData_DataEngine.xlsx", "HomeOwners", "TC93");

		try {	

			HomeOwnersStepsImpl pc = HomeOwnersSteps.create();

			pc.loginIntoTheApplication("su", "gw");

			pc.searchAccount(EnterAccountInformation.builder()
					.firstName(testData.getFirstName())
					.lastName(testData.getLastName()).build());

			pc.createAccount(CreateNewAccountFromPerson.builder()
					.firstName(testData.getFirstName())
					.lastName(testData.getLastName())
					.addressLine1(testData.getAddressLine1())
					.state(testData.getState())
					.city(testData.getCity())
					.zipCode(testData.getZipcode())
					.addressType(testData.getAddressType())
					.organization(testData.getProducerOrganization())
					.build());

			pc.selectProduct(ProductNames.HOME_OWNERS);

			pc.selectQualifications(Qualification.builder()

					.policyType(testData.getPolicyType())
					.coverageForm(testData.getCoverageForm())
					.dwellingOccupied(testData.getDwellingOccupied())
					.occupyDwellingFullTime(testData.getDwellingFullTime())
					.build());


			pc.updatePolicyInfo(PolicyInfo.builder()
					.policyEffectiveDate(testData.getCurrentDate())
					.policyTerm(testData.getPolicyTerm())
					.build());

			pc.addDwellingDetails(DwellingDetails.builder()
					.fireProtection(testData.getFireProtection())
					.addAdditionalInterest(true)
					.createInterest(AdditionalInterestFromPerson.builder()
							.interestType(InterestType.FIRST_MORTGAGE)
							.firstName(testData.getFirstName())
							.lastName(testData.getLastName())
							.addressLine1(testData.getAddressLine1())
							.state(testData.getState())
							.city(testData.getCity())
							.zipCode(testData.getZipcode())
							.addressType(testData.getAddressType()).build())
					.build());


			pc.addDwellingConstructionDetails(DwellingConstruction.builder()
					.year(testData.getCurrentYear()).build());

			pc.addCoverages(Coverages.builder(HomeOwnersConstants.PolicyType.CONDOMINIUM)
					.coinsurance(testData.getCoInsurance())
					.covCLimit(testData.getCovCLimit())
					.valuationMethod(testData.getValuationMethod())
					.prohibitedUse(testData.getProhibitedUse())
					.lossOfRentalIncome(testData.getRentalIncome())
					.build());

			pc.addModifiersDetails();

			pc.selectRiskAnalysis(RiskAnalysis.builder(RiskAnalysisType.NONE).build());
			pc.reviewPolicy(PolicyReview.builder(HomeOwnersConstants.PolicyReviewType.NONE).build());
			pc.viewQuote(Quote.builder().build());
			pc.viewForms(Quote.builder().build());
			pc.issuepolicy(HomeOwnersConstants.Transactions.SUBMISSION);

			Log.testCaseResult(driver);

		} catch (Exception e) {
			Log.exception(e, DriverManager.getDriver());
		}  finally {
			DriverManager.quitDriver(driver);
			Log.endTestCase();
		}
	}

	/**
	 * @author charu.anbarasan
	 * @param browser
	 * @throws Exception
	 */
	@Test(description = "Verify whether user able to create a condo policy with Additional Interests - Third Party Designee", dataProviderClass = DataProviderUtils.class, dataProvider = "parallelTestDataProvider")
	public void TC94(String browser) throws Exception {

		DriverManager.setDriver(browser);
		WebDriver driver = DriverManager.getDriver();
		Log.testCaseInfo("Verify whether user able to create a condo policy with Additional Interests - Third Party Designee",driver);
		HomeOwnersDataEngine testData = new HomeOwnersDataEngine("GWTestData_DataEngine.xlsx", "HomeOwners", "TC94");

		try {	

			HomeOwnersStepsImpl pc = HomeOwnersSteps.create();

			pc.loginIntoTheApplication("su", "gw");

			pc.searchAccount(EnterAccountInformation.builder()
					.firstName(testData.getFirstName())
					.lastName(testData.getLastName()).build());

			pc.createAccount(CreateNewAccountFromPerson.builder()
					.firstName(testData.getFirstName())
					.lastName(testData.getLastName())
					.addressLine1(testData.getAddressLine1())
					.state(testData.getState())
					.city(testData.getCity())
					.zipCode(testData.getZipcode())
					.addressType(testData.getAddressType())
					.organization(testData.getProducerOrganization())
					.build());

			pc.selectProduct(ProductNames.HOME_OWNERS);

			pc.selectQualifications(Qualification.builder()

					.policyType(testData.getPolicyType())
					.coverageForm(testData.getCoverageForm())
					.dwellingOccupied(testData.getDwellingOccupied())
					.occupyDwellingFullTime(testData.getDwellingFullTime())
					.build());


			pc.updatePolicyInfo(PolicyInfo.builder()
					.policyEffectiveDate(testData.getCurrentDate())
					.policyTerm(testData.getPolicyTerm())
					.build());

			pc.addDwellingDetails(DwellingDetails.builder()
					.fireProtection(testData.getFireProtection())
					.addAdditionalInterest(true)
					.createInterest(AdditionalInterestFromPerson.builder()
							.interestType(InterestType.THIRD_PARTY_DESIGNEE)
							.firstName(testData.getFirstName())
							.lastName(testData.getLastName())
							.addressLine1(testData.getAddressLine1())
							.state(testData.getState())
							.city(testData.getCity())
							.zipCode(testData.getZipcode())
							.addressType(testData.getAddressType()).build())
					.build());

			pc.addDwellingConstructionDetails(DwellingConstruction.builder()
					.year(testData.getCurrentYear()).build());

			pc.addCoverages(Coverages.builder(HomeOwnersConstants.PolicyType.CONDOMINIUM)
					.coinsurance(testData.getCoInsurance())
					.covCLimit(testData.getCovCLimit())
					.valuationMethod(testData.getValuationMethod())
					.prohibitedUse(testData.getProhibitedUse())
					.lossOfRentalIncome(testData.getRentalIncome())
					.build());

			pc.addModifiersDetails();

			pc.selectRiskAnalysis(RiskAnalysis.builder(RiskAnalysisType.NONE).build());
			pc.reviewPolicy(PolicyReview.builder(HomeOwnersConstants.PolicyReviewType.NONE).build());
			pc.viewQuote(Quote.builder().build());
			pc.viewForms(Quote.builder().build());
			pc.issuepolicy(HomeOwnersConstants.Transactions.SUBMISSION);

			Log.testCaseResult(driver);

		} catch (Exception e) {
			Log.exception(e, DriverManager.getDriver());
		}  finally {
			DriverManager.quitDriver(driver);
			Log.endTestCase();
		}
	}

	/**
	 * @author charu.anbarasan
	 * @param browser
	 * @throws Exception
	 */
	@Test(description = "To Verify whether user able to create a condo policy with Additional Interests - Second Mortgagee", dataProviderClass = DataProviderUtils.class, dataProvider = "parallelTestDataProvider")
	public void TC95(String browser) throws Exception {

		DriverManager.setDriver(browser);
		WebDriver driver = DriverManager.getDriver();
		Log.testCaseInfo("To Verify whether user able to create a condo policy with Additional Interests - Second Mortgagee",driver);
		HomeOwnersDataEngine testData = new HomeOwnersDataEngine("GWTestData_DataEngine.xlsx", "HomeOwners", "TC95");

		try {	

			HomeOwnersStepsImpl pc = HomeOwnersSteps.create();

			pc.loginIntoTheApplication("su", "gw");

			pc.searchAccount(EnterAccountInformation.builder()
					.firstName(testData.getFirstName())
					.lastName(testData.getLastName()).build());

			pc.createAccount(CreateNewAccountFromPerson.builder()
					.firstName(testData.getFirstName())
					.lastName(testData.getLastName())
					.addressLine1(testData.getAddressLine1())
					.state(testData.getState())
					.city(testData.getCity())
					.zipCode(testData.getZipcode())
					.addressType(testData.getAddressType())
					.organization(testData.getProducerOrganization())
					.build());

			pc.selectProduct(ProductNames.HOME_OWNERS);

			pc.selectQualifications(Qualification.builder()

					.policyType(testData.getPolicyType())
					.coverageForm(testData.getCoverageForm())
					.dwellingOccupied(testData.getDwellingOccupied())
					.occupyDwellingFullTime(testData.getDwellingFullTime())
					.build());


			pc.updatePolicyInfo(PolicyInfo.builder()
					.policyEffectiveDate(testData.getCurrentDate())
					.policyTerm(testData.getPolicyTerm())
					.build());

			pc.addDwellingDetails(DwellingDetails.builder()
					.fireProtection(testData.getFireProtection())
					.addAdditionalInterest(true)
					.createInterest(AdditionalInterestFromPerson.builder()
							.interestType(InterestType.SECOND_MORTGAGE)
							.firstName(testData.getFirstName())
							.lastName(testData.getLastName())
							.addressLine1(testData.getAddressLine1())
							.state(testData.getState())
							.city(testData.getCity())
							.zipCode(testData.getZipcode())
							.addressType(testData.getAddressType()).build())
					.build());


			pc.addDwellingConstructionDetails(DwellingConstruction.builder()
					.year(testData.getCurrentYear()).build());

			pc.addCoverages(Coverages.builder(HomeOwnersConstants.PolicyType.CONDOMINIUM)
					.coinsurance(testData.getCoInsurance())
					.covCLimit(testData.getCovCLimit())
					.valuationMethod(testData.getValuationMethod())
					.prohibitedUse(testData.getProhibitedUse())
					.lossOfRentalIncome(testData.getRentalIncome())
					.build());
			pc.addModifiersDetails();

			pc.selectRiskAnalysis(RiskAnalysis.builder(RiskAnalysisType.NONE).build());
			pc.reviewPolicy(PolicyReview.builder(HomeOwnersConstants.PolicyReviewType.NONE).build());
			pc.viewQuote(Quote.builder().build());
			pc.viewForms(Quote.builder().build());
			pc.issuepolicy(HomeOwnersConstants.Transactions.SUBMISSION);

			Log.testCaseResult(driver);

		} catch (Exception e) {
			Log.exception(e, DriverManager.getDriver());
		}  finally {
			DriverManager.quitDriver(driver);
			Log.endTestCase();
		}
	}

	/**
	 * @author charu.anbarasan
	 * @param browser
	 * @throws Exception
	 */
	@Test(description = "Verify whether user able to create a condo policy with Additional Interests - Third Mortgagee", dataProviderClass = DataProviderUtils.class, dataProvider = "parallelTestDataProvider")
	public void TC96(String browser) throws Exception {

		DriverManager.setDriver(browser);
		WebDriver driver = DriverManager.getDriver();
		Log.testCaseInfo("Verify whether user able to create a condo policy with Additional Interests - Third Mortgagee",driver);
		HomeOwnersDataEngine testData = new HomeOwnersDataEngine("GWTestData_DataEngine.xlsx", "HomeOwners", "TC96");

		try {	

			HomeOwnersStepsImpl pc = HomeOwnersSteps.create();

			pc.loginIntoTheApplication("su", "gw");

			pc.searchAccount(EnterAccountInformation.builder()
					.firstName(testData.getFirstName())
					.lastName(testData.getLastName()).build());

			pc.createAccount(CreateNewAccountFromPerson.builder()
					.firstName(testData.getFirstName())
					.lastName(testData.getLastName())
					.addressLine1(testData.getAddressLine1())
					.state(testData.getState())
					.city(testData.getCity())
					.zipCode(testData.getZipcode())
					.addressType(testData.getAddressType())
					.organization(testData.getProducerOrganization())
					.build());

			pc.selectProduct(ProductNames.HOME_OWNERS);

			pc.selectQualifications(Qualification.builder()

					.policyType(testData.getPolicyType())
					.coverageForm(testData.getCoverageForm())
					.dwellingOccupied(testData.getDwellingOccupied())
					.occupyDwellingFullTime(testData.getDwellingFullTime())
					.build());


			pc.updatePolicyInfo(PolicyInfo.builder()
					.policyEffectiveDate(testData.getCurrentDate())
					.policyTerm(testData.getPolicyTerm())
					.build());

			pc.addDwellingDetails(DwellingDetails.builder()
					.fireProtection(testData.getFireProtection())
					.addAdditionalInterest(true)
					.createInterest(AdditionalInterestFromPerson.builder()
							.interestType(InterestType.THIRD_MORTGAGE)
							.firstName(testData.getFirstName())
							.lastName(testData.getLastName())
							.addressLine1(testData.getAddressLine1())
							.state(testData.getState())
							.city(testData.getCity())
							.zipCode(testData.getZipcode())
							.addressType(testData.getAddressType()).build())
					.build());


			pc.addDwellingConstructionDetails(DwellingConstruction.builder()
					.year(testData.getCurrentYear()).build());

			pc.addCoverages(Coverages.builder(HomeOwnersConstants.PolicyType.CONDOMINIUM)
					.coinsurance(testData.getCoInsurance())
					.covCLimit(testData.getCovCLimit())
					.valuationMethod(testData.getValuationMethod())
					.prohibitedUse(testData.getProhibitedUse())
					.lossOfRentalIncome(testData.getRentalIncome())
					.build());

			pc.addModifiersDetails();

			pc.selectRiskAnalysis(RiskAnalysis.builder(RiskAnalysisType.NONE).build());
			pc.reviewPolicy(PolicyReview.builder(HomeOwnersConstants.PolicyReviewType.NONE).build());
			pc.viewQuote(Quote.builder().build());
			pc.viewForms(Quote.builder().build());
			pc.issuepolicy(HomeOwnersConstants.Transactions.SUBMISSION);

			Log.testCaseResult(driver);

		} catch (Exception e) {
			Log.exception(e, DriverManager.getDriver());
		}  finally {

			DriverManager.quitDriver(driver);
			Log.endTestCase();
		}
	}

	/**
	 * @author charu.anbarasan
	 * @param browser
	 * @throws Exception
	 */
	@Test(description = "Verify whether user able to Quote and Issue when secondary insurer is added in the Homeowners - Condominium", dataProviderClass = DataProviderUtils.class, dataProvider = "parallelTestDataProvider")
	public void TC91(String browser) throws Exception {

		DriverManager.setDriver(browser);
		WebDriver driver = DriverManager.getDriver();
		Log.testCaseInfo("Verify whether user able to Quote and Issue when secondary insurer is added in the Homeowners - Condominium",driver);
		HomeOwnersDataEngine testData = new HomeOwnersDataEngine("GWTestData_DataEngine.xlsx", "HomeOwners", "TC91");

		try {	

			HomeOwnersStepsImpl pc = HomeOwnersSteps.create();

			pc.loginIntoTheApplication("su", "gw");

			pc.searchAccount(EnterAccountInformation.builder()
					.firstName(testData.getFirstName())
					.lastName(testData.getLastName()).build());

			pc.createAccount(CreateNewAccountFromPerson.builder()
					.firstName(testData.getFirstName())
					.lastName(testData.getLastName())
					.addressLine1(testData.getAddressLine1())
					.state(testData.getState())
					.city(testData.getCity())
					.zipCode(testData.getZipcode())
					.addressType(testData.getAddressType())
					.organization(testData.getProducerOrganization())
					.build());

			pc.selectProduct(ProductNames.HOME_OWNERS);

			pc.selectQualifications(Qualification.builder()

					.policyType(testData.getPolicyType())
					.coverageForm(testData.getCoverageForm())
					.dwellingOccupied(testData.getDwellingOccupied())
					.occupyDwellingFullTime(testData.getDwellingFullTime())
					.build());


			pc.updatePolicyInfo(PolicyInfo.builder()
					.policyEffectiveDate(testData.getCurrentDate())
					.policyTerm(testData.getPolicyTerm())
					.addSecondaryInsured(true)
					.createInsured(CreateNewAccountFromPerson.builder()
							.addSecondaryInsured(true)
							.firstName(testData.getFirstName())
							.lastName(testData.getLastName())
							.addressLine1(testData.getAddressLine1())
							.state(testData.getState())
							.city(testData.getCity())
							.zipCode(testData.getZipcode())
							.addressType(testData.getAddressType())
							.build())
					.build());

			pc.addDwellingDetails(DwellingDetails.builder()
					.fireProtection(testData.getFireProtection())
					.build());

			pc.addDwellingConstructionDetails(DwellingConstruction.builder()
					.year(testData.getCurrentYear()).build());

			pc.addCoverages(Coverages.builder(HomeOwnersConstants.PolicyType.CONDOMINIUM)
					.coinsurance(testData.getCoInsurance())
					.covCLimit(testData.getCovCLimit())
					.valuationMethod(testData.getValuationMethod())
					.prohibitedUse(testData.getProhibitedUse())
					.lossOfRentalIncome(testData.getRentalIncome())
					.build());

			pc.addModifiersDetails();

			pc.selectRiskAnalysis(RiskAnalysis.builder(RiskAnalysisType.NONE).build());
			pc.reviewPolicy(PolicyReview.builder(HomeOwnersConstants.PolicyReviewType.NONE).build());
			pc.viewQuote(Quote.builder().build());
			pc.viewForms(Quote.builder().build());
			pc.issuepolicy(HomeOwnersConstants.Transactions.SUBMISSION);

			Log.testCaseResult(driver);

		} catch (Exception e) {
			Log.exception(e, DriverManager.getDriver());
		}  finally {
			DriverManager.quitDriver(driver);
			Log.endTestCase();
		}
	}

	/**
	 * @author charu.anbarasan
	 * @param browser
	 * @throws Exception
	 */
	@Test(description = "To Verify whether user able to Quote and Issue when Additional insurer is added in the Homeowners - Condominium", dataProviderClass = DataProviderUtils.class, dataProvider = "parallelTestDataProvider")
	public void TC92(String browser) throws Exception {

		DriverManager.setDriver(browser);
		WebDriver driver = DriverManager.getDriver();
		Log.testCaseInfo("To Verify whether user able to Quote and Issue when Additional insurer is added in the Homeowners - Condominium",driver);
		HomeOwnersDataEngine testData = new HomeOwnersDataEngine("GWTestData_DataEngine.xlsx", "HomeOwners", "TC92");

		try {	

			HomeOwnersStepsImpl pc = HomeOwnersSteps.create();

			pc.loginIntoTheApplication("su", "gw");

			pc.searchAccount(EnterAccountInformation.builder()
					.firstName(testData.getFirstName())
					.lastName(testData.getLastName()).build());

			pc.createAccount(CreateNewAccountFromPerson.builder()
					.firstName(testData.getFirstName())
					.lastName(testData.getLastName())
					.addressLine1(testData.getAddressLine1())
					.state(testData.getState())
					.city(testData.getCity())
					.zipCode(testData.getZipcode())
					.addressType(testData.getAddressType())
					.organization(testData.getProducerOrganization())
					.build());

			pc.selectProduct(ProductNames.HOME_OWNERS);

			pc.selectQualifications(Qualification.builder()

					.policyType(testData.getPolicyType())
					.coverageForm(testData.getCoverageForm())
					.dwellingOccupied(testData.getDwellingOccupied())
					.occupyDwellingFullTime(testData.getDwellingFullTime())
					.build());

			pc.addDwellingDetails(DwellingDetails.builder()
					.fireProtection(testData.getFireProtection())
					.addAdditionalInsured(true)
					.createInsured(CreateNewAccountFromPerson.builder()
							.addAdditionalInsured(true)
							.insuredType(InsuredType.CONDO_ASSOCIATION)
							.firstName(testData.getFirstName())
							.lastName(testData.getLastName())
							.addressLine1(testData.getAddressLine1())
							.state(testData.getState())
							.city(testData.getCity())
							.zipCode(testData.getZipcode())
							.addressType(testData.getAddressType())
							.build())
					.build());

			pc.addDwellingConstructionDetails(DwellingConstruction.builder()
					.year(testData.getCurrentYear()).build());

			pc.addCoverages(Coverages.builder(HomeOwnersConstants.PolicyType.CONDOMINIUM)
					.coinsurance(testData.getCoInsurance())
					.covCLimit(testData.getCovCLimit())
					.valuationMethod(testData.getValuationMethod())
					.prohibitedUse(testData.getProhibitedUse())
					.lossOfRentalIncome(testData.getRentalIncome())
					.build());

			pc.addModifiersDetails();

			pc.selectRiskAnalysis(RiskAnalysis.builder(RiskAnalysisType.NONE).build());
			pc.reviewPolicy(PolicyReview.builder(HomeOwnersConstants.PolicyReviewType.NONE).build());
			pc.viewQuote(Quote.builder().build());
			pc.viewForms(Quote.builder().build());
			pc.issuepolicy(HomeOwnersConstants.Transactions.SUBMISSION);

			Log.testCaseResult(driver);

		} catch (Exception e) {
			Log.exception(e, DriverManager.getDriver());
		}  finally {
			DriverManager.quitDriver(driver);
			Log.endTestCase();
		}
	}

	/**
	 * @author charu.anbarasan
	 * @param browser
	 * @throws Exception
	 */
	@Test(description = "To verify whether user able to Quote and Issue the Rewrite Transaction for Homeowners Policy successfully", dataProviderClass = DataProviderUtils.class, dataProvider = "parallelTestDataProvider")
	public void TC79(String browser) throws Exception {

		DriverManager.setDriver(browser);
		WebDriver driver = DriverManager.getDriver();
		Log.testCaseInfo("To verify whether user able to Quote and Issue the Rewrite Transaction for Homeowners Policy successfully",driver);
		HomeOwnersDataEngine testData = new HomeOwnersDataEngine("GWTestData_DataEngine.xlsx", "HomeOwners", "TC79");

		try {	

			HomeOwnersStepsImpl pc = HomeOwnersSteps.create();

			pc.loginIntoTheApplication("su", "gw");

			//Get policy number from Excel sheet which is generated by data generator using auto generated policy number created copy submission 

			pc.searchPolicyNumber(PolicyDetails.builder().policyNumber(testData.getPolicyNumber()).build());

			pc.copySubmissions();

			pc.viewPolicy();

			pc.cancelPolicy(CancellationSource.builder().source(testData.getSource())
					.reason(testData.getReason()).build());

			pc.viewPolicy();

			pc.policyRewriteFullTerm();

			pc.updatePolicyInfo(PolicyInfo.builder()
					.policyTerm(testData.getPolicyTerm2())
					.policyExpirationDate(testData.getDateSixMonthAhead())
					.build());
			pc.addDwellingDetails(DwellingDetails.builder().build());
			pc.addDwellingConstructionDetails(DwellingConstruction.builder().build());
			pc.addCoverages(Coverages.builder(HomeOwnersConstants.PolicyType.NONE).build());
			pc.addModifiersDetails();
			pc.selectRiskAnalysis(RiskAnalysis.builder(RiskAnalysisType.NONE).build());
			pc.reviewPolicy(PolicyReview.builder(HomeOwnersConstants.PolicyReviewType.NONE).build());
			pc.viewQuote(Quote.builder().build());
			pc.viewForms(Quote.builder().build());
			pc.selectPayments(Payments.builder().build());
			pc.issuepolicy(HomeOwnersConstants.Transactions.REWRITE_FULL_TERM);
			pc.approveUWissue(UWIssueType.builder().build());
			pc.issuepolicy(HomeOwnersConstants.Transactions.REWRITE_FULL_TERM);
			pc.viewPolicy();

			Log.testCaseResult(driver);

		} catch (Exception e) {
			Log.exception(e, DriverManager.getDriver());
		}  finally {

			DriverManager.quitDriver(driver);
			Log.endTestCase();
		}
	}
	/**
	 * @author charu.anbarasan
	 * @param browser
	 * @throws Exception
	 */
	@Test(description = "User able to Quote and Issue the Homeowners - Condominium Policy - Out of Sequence  transaction", dataProviderClass = DataProviderUtils.class, dataProvider = "parallelTestDataProvider")
	public void TC87(String browser) throws Exception {

		DriverManager.setDriver(browser);
		WebDriver driver = DriverManager.getDriver();
		Log.testCaseInfo("User able to Quote and Issue the Homeowners - Condominium Policy - Out of Sequence  transaction",driver);
		HomeOwnersDataEngine testData = new HomeOwnersDataEngine("GWTestData_DataEngine.xlsx", "HomeOwners", "TC87");

		try {	

			HomeOwnersStepsImpl pc = HomeOwnersSteps.create();

			pc.loginIntoTheApplication("su", "gw");

			//Get policy number from Excel sheet which is generated by data generator using auto generated policy number created copy submission 

			pc.searchPolicyNumber(PolicyDetails.builder().policyNumber(testData.getPolicyNumber()).build());

			pc.copySubmissions();

			pc.viewPolicy();

			pc.policyChange(PolicyChange.builder()
					.date(testData.getDateOneMonthAhead())
					.build());

			pc.updatePolicyInfo(PolicyInfo.builder().build());

			pc.addDwellingDetails(DwellingDetails.builder().fireProtection(testData.getFireProtection2()).build());
			pc.addDwellingConstructionDetails(DwellingConstruction.builder()
					.build());
			pc.addCoverages(Coverages.builder(HomeOwnersConstants.PolicyType.NONE).build());
			pc.addModifiersDetails();
			pc.selectRiskAnalysis(RiskAnalysis.builder(RiskAnalysisType.NONE).build());
			pc.reviewPolicy(PolicyReview.builder(HomeOwnersConstants.PolicyReviewType.NONE).build());
			pc.viewQuote(Quote.builder().build());
			pc.viewForms(Quote.builder().build());
			pc.selectPayments(Payments.builder().build());
			pc.issuepolicy(HomeOwnersConstants.Transactions.POLICY_CHANGE);
			pc.viewPolicy();		

			pc.policyChange(PolicyChange.builder()
					.date(testData.getCurrentDate())
					.build());
			pc.verifyOutOfSequenceMessage(PolicyChange.builder()
					.date(testData.getDateOneMonthAhead()).build());

			pc.updatePolicyInfo(PolicyInfo.builder()
					.build());
			pc.verifyOutOfSequenceMessage(PolicyChange.builder()
					.date(testData.getDateOneMonthAhead()).build());
			pc.addDwellingDetails(DwellingDetails.builder().fireProtection(testData.getFireProtection()).build());
			pc.verifyOutOfSequenceMessage(PolicyChange.builder()
					.date(testData.getDateOneMonthAhead()).build());
			pc.addDwellingConstructionDetails(DwellingConstruction.builder()
					.build());
			pc.verifyOutOfSequenceMessage(PolicyChange.builder()
					.date(testData.getDateOneMonthAhead()).build());
			pc.addCoverages(Coverages.builder(HomeOwnersConstants.PolicyType.NONE).build());
			pc.verifyOutOfSequenceMessage(PolicyChange.builder()
					.date(testData.getDateOneMonthAhead()).build());
			pc.addModifiersDetails();
			pc.verifyOutOfSequenceMessage(PolicyChange.builder()
					.date(testData.getDateOneMonthAhead()).build());
			pc.selectRiskAnalysis(RiskAnalysis.builder(RiskAnalysisType.NONE).build());
			pc.verifyOutOfSequenceMessage(PolicyChange.builder()
					.date(testData.getDateOneMonthAhead()).build());
			pc.reviewPolicy(PolicyReview.builder(HomeOwnersConstants.PolicyReviewType.OUT_OF_SEQUENCE).build());
			pc.verifyOutOfSequenceMessage(PolicyChange.builder()
					.date(testData.getDateOneMonthAhead()).build());
			pc.viewQuote(Quote.builder().build());
			pc.viewForms(Quote.builder().build());
			pc.verifyOutOfSequenceMessage(PolicyChange.builder()
					.date(testData.getDateOneMonthAhead()).build());
			pc.selectPayments(Payments.builder().build());
			pc.verifyOutOfSequenceMessage(PolicyChange.builder()
					.date(testData.getDateOneMonthAhead()).build());
			pc.issuepolicy(HomeOwnersConstants.Transactions.POLICY_CHANGE);
			pc.viewPolicy();		

			Log.testCaseResult(driver);

		} catch (Exception e) {
			Log.exception(e, DriverManager.getDriver());
		}  finally {
			DriverManager.quitDriver(driver);
			Log.endTestCase();
		}
	}

	/**
	 * @author vignesh.ravi
	 * @param browser
	 * @throws Exception
	 */
	@Test(description="Verify whether user able to Quote and Issue - Pre renewal direction for a rental policy", dataProviderClass = DataProviderUtils.class, dataProvider = "parallelTestDataProvider")
	public void TC111(String browser) throws Exception {

		DriverManager.setDriver(browser);
		WebDriver driver = DriverManager.getDriver();
		Log.testCaseInfo("Verify whether user able to Quote and Issue - Pre renewal direction for a rental policy",driver);
		HomeOwnersDataEngine testData = new HomeOwnersDataEngine("GWTestData_DataEngine.xlsx", "HomeOwners", "TC111");

		try {	

			HomeOwnersStepsImpl pc = HomeOwnersSteps.create();

			pc.loginIntoTheApplication("su", "gw");

			//Get policy number from Excel sheet which is generated by data generator using auto generated policy number created copy submission 

			pc.searchPolicyNumber(PolicyDetails.builder().policyNumber(testData.getPolicyNumber()).build());

			pc.policyPreRenewalDirection(PreRenewalDirection.builder()
					.direction(testData.getDirection())
					.security(testData.getSecurity())
					.reason(testData.getPreRenewalReason())
					.text(testData.getText()).build());

			Log.testCaseResult(driver);

		} catch (Exception e) {
			Log.exception(e, DriverManager.getDriver());
		}  finally {
			DriverManager.quitDriver(driver);
			Log.endTestCase();
		}
	}
	/**
	 * @author vignesh.ravi
	 * @param browser
	 * @throws Exception
	 */
	@Test(description="Verify whether user able to Quote and Issue the Homeowners Policy", dataProviderClass = DataProviderUtils.class, dataProvider = "parallelTestDataProvider")
	public void TC51(String browser) throws Exception {

		DriverManager.setDriver(browser);
		WebDriver driver = DriverManager.getDriver();
		Log.testCaseInfo("Verify whether user able to Quote and Issue the Homeowners Policy",driver);
		HomeOwnersDataEngine testData = new HomeOwnersDataEngine("GWTestData_DataEngine.xlsx", "HomeOwners", "TC51");

		try {	

			HomeOwnersStepsImpl pc = HomeOwnersSteps.create();

			pc.loginIntoTheApplication("su", "gw");

			pc.searchAccount(EnterAccountInformation.builder()
					.firstName(testData.getFirstName())
					.lastName(testData.getLastName()).build());

			pc.createAccount(CreateNewAccountFromPerson.builder()
					.firstName(testData.getFirstName())
					.lastName(testData.getLastName())
					.addressLine1(testData.getAddressLine1())
					.state(testData.getState())
					.city(testData.getCity())
					.zipCode(testData.getZipcode())
					.addressType(testData.getAddressType())
					.organization(testData.getProducerOrganization())
					.build());

			pc.selectProduct(ProductNames.HOME_OWNERS);

			pc.selectQualifications(Qualification.builder()

					.policyType(testData.getPolicyType())
					.coverageForm(testData.getCoverageForm())
					.dwellingOccupied(testData.getDwellingOccupied())
					.occupyDwellingFullTime(testData.getDwellingFullTime())
					.build());

			pc.updatePolicyInfo(PolicyInfo.builder()
					.policyEffectiveDate(testData.getCurrentDate())
					.policyTerm(testData.getPolicyTerm())
					.build());

			pc.addDwellingDetails(DwellingDetails.builder().fireProtection(testData.getFireProtection()).build());

			pc.addDwellingConstructionDetails(DwellingConstruction.builder()
					.year(testData.getCurrentYear()).build());

			pc.addCoverages(Coverages.builder(HomeOwnersConstants.PolicyType.DWELLING)
					.coinsurance(testData.getCoInsurance())
					.prohibitedUse(testData.getProhibitedUse())
					.lossOfRentalIncome(testData.getRentalIncome())
					.build());

			pc.addModifiersDetails();

			pc.selectRiskAnalysis(RiskAnalysis.builder(RiskAnalysisType.NONE).build());
			pc.reviewPolicy(PolicyReview.builder(HomeOwnersConstants.PolicyReviewType.NONE).build());
			pc.viewQuote(Quote.builder().build());
			pc.viewForms(Quote.builder().build());
			pc.selectPayments(Payments.builder().build());
			pc.issuepolicy(HomeOwnersConstants.Transactions.SUBMISSION);
			pc.viewPolicy();

			Log.testCaseResult(driver);

		} catch (Exception e) {
			Log.exception(e, DriverManager.getDriver());
		}  finally {
			DriverManager.quitDriver(driver);
			Log.endTestCase();
		}
	}
	/**
	 * @author vignesh.ravi
	 * @param browser
	 * @throws Exception
	 */
	@Test(description="Verify whether user able to do Policy change transaction for Rental policy", dataProviderClass = DataProviderUtils.class, dataProvider = "parallelTestDataProvider")
	public void TC98(String browser) throws Exception {

		DriverManager.setDriver(browser);
		WebDriver driver = DriverManager.getDriver();
		Log.testCaseInfo("Verify whether user able to do Policy change transaction for Rental policy",driver);
		HomeOwnersDataEngine testData = new HomeOwnersDataEngine("GWTestData_DataEngine.xlsx", "HomeOwners", "TC98");

		try {	

			HomeOwnersStepsImpl pc = HomeOwnersSteps.create();

			pc.loginIntoTheApplication("su", "gw");

			//Get policy number from Excel sheet which is generated by data generator using auto generated policy number created copy submission 

			pc.searchPolicyNumber(PolicyDetails.builder().policyNumber(testData.getPolicyNumber()).build());

			pc.copySubmissions();

			pc.viewPolicy();


			pc.policyChange(PolicyChange.builder().date(testData.getCurrentDate()).build());
			pc.updatePolicyInfo(PolicyInfo.builder()
					.build());
			pc.addDwellingDetails(DwellingDetails.builder().fireProtection(testData.getFireProtection2()).build());
			pc.addDwellingConstructionDetails(DwellingConstruction.builder()
					.build());
			pc.addCoverages(Coverages.builder(HomeOwnersConstants.PolicyType.NONE).build());
			pc.addModifiersDetails();
			pc.selectRiskAnalysis(RiskAnalysis.builder(RiskAnalysisType.NONE).build());
			pc.reviewPolicy(PolicyReview.builder(HomeOwnersConstants.PolicyReviewType.NONE).build());
			pc.viewQuote(Quote.builder().build());
			pc.viewForms(Quote.builder().build());
			pc.selectPayments(Payments.builder().build());
			pc.issuepolicy(HomeOwnersConstants.Transactions.POLICY_CHANGE);
			pc.viewPolicy();

			Log.testCaseResult(driver);

		} catch (Exception e) {
			Log.exception(e, DriverManager.getDriver());
		}  finally {
			DriverManager.quitDriver(driver);
			Log.endTestCase();
		}
	}
	/**
	 * @author vignesh.ravi
	 * @param browser
	 * @throws Exception
	 */
	@Test(description ="Verify whether user able to decline submission for Homeowners - Condominium policy", dataProviderClass = DataProviderUtils.class, dataProvider = "parallelTestDataProvider")
	public void TC85(String browser) throws Exception {

		DriverManager.setDriver(browser);
		WebDriver driver = DriverManager.getDriver();
		Log.testCaseInfo("Verify whether user able to decline submission for Homeowners - Condominium policy",driver);
		HomeOwnersDataEngine testData = new HomeOwnersDataEngine("GWTestData_DataEngine.xlsx", "HomeOwners", "TC85");

		try {	

			HomeOwnersStepsImpl pc = HomeOwnersSteps.create();

			pc.loginIntoTheApplication("su", "gw");

			pc.searchAccount(EnterAccountInformation.builder()
					.firstName(testData.getFirstName())
					.lastName(testData.getLastName()).build());

			pc.createAccount(CreateNewAccountFromPerson.builder()
					.firstName(testData.getFirstName())
					.lastName(testData.getLastName())
					.addressLine1(testData.getAddressLine1())
					.state(testData.getState())
					.city(testData.getCity())
					.zipCode(testData.getZipcode())
					.addressType(testData.getAddressType())
					.organization(testData.getProducerOrganization())
					.build());

			pc.selectProduct(ProductNames.HOME_OWNERS);

			pc.selectQualifications(Qualification.builder()

					.policyType(testData.getPolicyType())
					.coverageForm(testData.getCoverageForm())
					.dwellingOccupied(testData.getDwellingOccupied())
					.occupyDwellingFullTime(testData.getDwellingFullTime())
					.build());

			pc.updatePolicyInfo(PolicyInfo.builder()
					.policyEffectiveDate(testData.getCurrentDate())
					.policyTerm(testData.getPolicyTerm())
					.build());

			pc.addDwellingDetails(DwellingDetails.builder()
					.fireProtection(testData.getFireProtection())
					.build());

			pc.addDwellingConstructionDetails(DwellingConstruction.builder()
					.year(testData.getCurrentYear()).build());

			pc.addCoverages(Coverages.builder(HomeOwnersConstants.PolicyType.CONDOMINIUM)
					.coinsurance(testData.getCoInsurance())
					.covCLimit(testData.getCovCLimit())
					.valuationMethod(testData.getValuationMethod())
					.prohibitedUse(testData.getProhibitedUse())
					.lossOfRentalIncome(testData.getRentalIncome())
					.build());

			pc.addModifiersDetails();

			pc.selectRiskAnalysis(RiskAnalysis.builder(RiskAnalysisType.NONE).build());
			pc.reviewPolicy(PolicyReview.builder(HomeOwnersConstants.PolicyReviewType.NONE).build());
			pc.viewQuote(Quote.builder().build());
			pc.viewForms(Quote.builder().build());
			pc.selectPayments(Payments.builder().build());

			pc.policyCloseOptions(CloseOptions.builder(HomeOwnersConstants.CloseOptionType.DECLINE)
					.reasonDeclined(testData.getReasonDeclined()).build());

			Log.testCaseResult(driver);

		} catch (Exception e) {
			Log.exception(e, DriverManager.getDriver());
		}  finally {
			DriverManager.quitDriver(driver);
			Log.endTestCase();
		}
	}
	/**
	 * @author vignesh.ravi
	 * @param browser
	 * @throws Exception
	 */
	@Test(description="Verify whether user able to Quote and Issue - Rewrite new term transaction for Rental policy.", dataProviderClass = DataProviderUtils.class, dataProvider = "parallelTestDataProvider")
	public void TC104(String browser) throws Exception {

		DriverManager.setDriver(browser);
		WebDriver driver = DriverManager.getDriver();
		Log.testCaseInfo("Verify whether user able to Quote and Issue - Rewrite new term transaction for Rental policy.",driver);
		HomeOwnersDataEngine testData = new HomeOwnersDataEngine("GWTestData_DataEngine.xlsx", "HomeOwners", "TC104");

		try {	

			HomeOwnersStepsImpl pc = HomeOwnersSteps.create();

			pc.loginIntoTheApplication("su", "gw");

			//Get policy number from Excel sheet which is generated by data generator using auto generated policy number created copy submission 

			pc.searchPolicyNumber(PolicyDetails.builder().policyNumber(testData.getPolicyNumber()).build());

			pc.copySubmissions();

			pc.viewPolicy();

			pc.cancelPolicy(CancellationSource.builder().source(testData.getSource())
					.reason(testData.getReason()).build());
			pc.viewPolicy();
			pc.policyRewriteNewTerm();

			pc.updatePolicyInfo(PolicyInfo.builder()
					.policyTerm(testData.getPolicyTerm2())
					.policyExpirationDate(testData.getDateSixMonthAhead())
					.build());

			pc.addDwellingDetails(DwellingDetails.builder().build());
			pc.addDwellingConstructionDetails(DwellingConstruction.builder().build());
			pc.addCoverages(Coverages.builder(HomeOwnersConstants.PolicyType.NONE).build());
			pc.addModifiersDetails();
			pc.selectRiskAnalysis(RiskAnalysis.builder(RiskAnalysisType.NONE).build());
			pc.reviewPolicy(PolicyReview.builder(HomeOwnersConstants.PolicyReviewType.NONE).build());
			pc.viewQuote(Quote.builder().build());
			pc.viewForms(Quote.builder().build());
			pc.selectPayments(Payments.builder().build());
			pc.issuepolicy(HomeOwnersConstants.Transactions.REWRITE_NEW_TERM);
			pc.approveUWissue(UWIssueType.builder().build());
			pc.issuepolicy(HomeOwnersConstants.Transactions.REWRITE_NEW_TERM);
			pc.viewPolicy();

			Log.testCaseResult(driver);

		} catch (Exception e) {
			Log.exception(e, DriverManager.getDriver());
		}  finally {
			DriverManager.quitDriver(driver);
			Log.endTestCase();
		}
	}
	/**
	 * @author vignesh.ravi
	 * @param browser
	 * @throws Exception
	 */
	@Test(description ="Verify whether user able to Quote and Issue the  Homeowners - Condominium Policy with term type as Annual/12 months", dataProviderClass = DataProviderUtils.class, dataProvider = "parallelTestDataProvider")
	public void TC89(String browser) throws Exception {

		DriverManager.setDriver(browser);
		WebDriver driver = DriverManager.getDriver();
		Log.testCaseInfo("Verify whether user able to Quote and Issue the  Homeowners - Condominium Policy with term type as Annual/12 months",driver);
		HomeOwnersDataEngine testData = new HomeOwnersDataEngine("GWTestData_DataEngine.xlsx", "HomeOwners", "TC89");

		try {	

			HomeOwnersStepsImpl pc = HomeOwnersSteps.create();

			pc.loginIntoTheApplication("su", "gw");

			pc.searchAccount(EnterAccountInformation.builder()
					.firstName(testData.getFirstName())
					.lastName(testData.getLastName()).build());

			pc.createAccount(CreateNewAccountFromPerson.builder()
					.firstName(testData.getFirstName())
					.lastName(testData.getLastName())
					.addressLine1(testData.getAddressLine1())
					.state(testData.getState())
					.city(testData.getCity())
					.zipCode(testData.getZipcode())
					.addressType(testData.getAddressType())
					.organization(testData.getProducerOrganization())
					.build());

			pc.selectProduct(ProductNames.HOME_OWNERS);

			pc.selectQualifications(Qualification.builder()

					.policyType(testData.getPolicyType())
					.coverageForm(testData.getCoverageForm())
					.dwellingOccupied(testData.getDwellingOccupied())
					.occupyDwellingFullTime(testData.getDwellingFullTime())
					.build());

			pc.updatePolicyInfo(PolicyInfo.builder()
					.policyEffectiveDate(testData.getCurrentDate())
					.policyTerm(testData.getPolicyTerm())
					.build());

			pc.addDwellingDetails(DwellingDetails.builder()
					.fireProtection(testData.getFireProtection())
					.build());

			pc.addDwellingConstructionDetails(DwellingConstruction.builder()
					.year(testData.getCurrentYear()).build());

			pc.addCoverages(Coverages.builder(HomeOwnersConstants.PolicyType.CONDOMINIUM)
					.coinsurance(testData.getCoInsurance())
					.covCLimit(testData.getCovCLimit())
					.valuationMethod(testData.getValuationMethod())
					.prohibitedUse(testData.getProhibitedUse())
					.lossOfRentalIncome(testData.getRentalIncome())
					.build());

			pc.addModifiersDetails();

			pc.selectRiskAnalysis(RiskAnalysis.builder(RiskAnalysisType.NONE).build());
			pc.reviewPolicy(PolicyReview.builder(HomeOwnersConstants.PolicyReviewType.NONE).build());
			pc.viewQuote(Quote.builder().build());
			pc.viewForms(Quote.builder().build());
			pc.selectPayments(Payments.builder().build());
			pc.issuepolicy(HomeOwnersConstants.Transactions.SUBMISSION);
			pc.viewPolicy();

			Log.testCaseResult(driver);

		} catch (Exception e) {
			Log.exception(e, DriverManager.getDriver());
		}  finally {
			DriverManager.quitDriver(driver);
			Log.endTestCase();
		}
	}

	/**
	 * @author surendar.baskaran
	 * @param browser
	 * @throws Exception
	 */
	@Test(description ="Resolve the contingency for homeowners policy by uploading required documents.", dataProviderClass = DataProviderUtils.class, dataProvider = "parallelTestDataProvider")
	public void TC290(String browser) throws Exception {

		DriverManager.setDriver(browser);
		WebDriver driver = DriverManager.getDriver();
		Log.testCaseInfo("Resolve the contingency for homeowners policy by uploading required documents.",driver);
		HomeOwnersDataEngine testData = new HomeOwnersDataEngine("GWTestData_DataEngine.xlsx", "HomeOwners", "TC290");

		try {	

			HomeOwnersStepsImpl pc = HomeOwnersSteps.create();

			pc.loginIntoTheApplication("su", "gw");

			pc.searchAccount(EnterAccountInformation.builder()
					.firstName(testData.getFirstName())
					.lastName(testData.getLastName()).build());

			pc.createAccount(CreateNewAccountFromPerson.builder()
					.firstName(testData.getFirstName())
					.lastName(testData.getLastName())
					.addressLine1(testData.getAddressLine1())
					.state(testData.getState())
					.city(testData.getCity())
					.zipCode(testData.getZipcode())
					.addressType(testData.getAddressType())
					.organization(testData.getProducerOrganization())
					.build());

			pc.selectProduct(ProductNames.HOME_OWNERS);

			pc.selectQualifications(Qualification.builder()

					.policyType(testData.getPolicyType())
					.coverageForm(testData.getCoverageForm())
					.dwellingOccupied(testData.getDwellingOccupied())
					.occupyDwellingFullTime(testData.getDwellingFullTime())
					.build());


			pc.updatePolicyInfo(PolicyInfo.builder()
					.policyEffectiveDate(testData.getCurrentDate())
					.policyTerm(testData.getPolicyTerm())
					.build());

			pc.addDwellingDetails(DwellingDetails.builder().fireProtection(testData.getFireProtection()).build());

			pc.addDwellingConstructionDetails(DwellingConstruction.builder()
					.year(testData.getCurrentYear()).build());

			pc.addCoverages(Coverages.builder(HomeOwnersConstants.PolicyType.RENTAL)
					.prohibitedUse(testData.getProhibitedUse())
					.valuationMethod(testData.getValuationMethod())
					.covCLimit(testData.getCovCLimit())
					.build());

			pc.addModifiersDetails();

			pc.selectRiskAnalysis(RiskAnalysis.builder(RiskAnalysisType.CONTINGENCY).contingencyTitle(DataFakers.generateRandomString("Contigency"))
					.contingencyDescription(testData.getContingencyDescription())
					.contingencyAction(testData.getContingencyAction())
					.contingencyDueDate(testData.getDateOneMonthAhead()).build());

			pc.reviewPolicy(PolicyReview.builder(HomeOwnersConstants.PolicyReviewType.NONE).build());
			pc.viewQuote(Quote.builder().build());
			pc.viewForms(Quote.builder().build());
			pc.selectPayments(Payments.builder().build());
			pc.issuepolicy(HomeOwnersConstants.Transactions.SUBMISSION);
			pc.viewPolicy();
			pc.completedPolicyTransactions();

			pc.selectRiskAnalysis(RiskAnalysis.builder(RiskAnalysisType.ATTACH_DOCUMENT_CONTINGENCY)
					.documentName("orrange.png").contingencyDocumentStatus(testData.getContigencyStatus()).
					contingencyDocumentType(testData.getContingencyDocumentType()).build());

			Log.testCaseResult(driver);

		} catch (Exception e) {
			Log.exception(e, DriverManager.getDriver());
		}  finally {
			DriverManager.quitDriver(driver);
			Log.endTestCase();
		}
	}

	/**
	 * @author somasundaram.muthu
	 * Test Description: Check whether the user is able to reopen the closed UW issue for homeowners policy.
	 * @param browser
	 * @throws Exception
	 */
	@Test(description ="Check whether the user is able to reopen the closed UW issue for homeowners policy.", dataProviderClass = DataProviderUtils.class, dataProvider = "parallelTestDataProvider")
	public void TC322(String browser) throws Exception {

		DriverManager.setDriver(browser);
		WebDriver driver = DriverManager.getDriver();
		Log.testCaseInfo("Check whether the user is able to reopen the closed UW issue for homeowners policy.",driver);
		HomeOwnersDataEngine testData = new HomeOwnersDataEngine("GWTestData_DataEngine.xlsx", "HomeOwners", "TC322");

		try {	

			HomeOwnersStepsImpl pc = HomeOwnersSteps.create();

			pc.loginIntoTheApplication("su", "gw");

			pc.searchAccount(EnterAccountInformation.builder()
					.firstName(testData.getFirstName())
					.lastName(testData.getLastName()).build());

			pc.createAccount(CreateNewAccountFromPerson.builder()
					.firstName(testData.getFirstName())
					.lastName(testData.getLastName())
					.addressLine1(testData.getAddressLine1())
					.state(testData.getState())
					.city(testData.getCity())
					.zipCode(testData.getZipcode())
					.addressType(testData.getAddressType())
					.organization(testData.getProducerOrganization())
					.build());

			pc.selectProduct(ProductNames.HOME_OWNERS);

			pc.selectQualifications(Qualification.builder()

					.policyType(testData.getPolicyType())
					.coverageForm(testData.getCoverageForm())
					.dwellingOccupied(testData.getDwellingOccupied())
					.occupyDwellingFullTime(testData.getDwellingFullTime())
					.build());


			pc.updatePolicyInfo(PolicyInfo.builder()
					.policyEffectiveDate(testData.getCurrentDate())
					.policyTerm(testData.getPolicyTerm())
					.build());

			pc.addDwellingDetails(DwellingDetails.builder().fireProtection(testData.getFireProtection()).build());

			pc.addDwellingConstructionDetails(DwellingConstruction.builder()
					.year(testData.getCurrentYear()).build());

			pc.addCoverages(Coverages.builder(HomeOwnersConstants.PolicyType.RENTAL)
					.prohibitedUse(testData.getProhibitedUse())
					.valuationMethod(testData.getValuationMethod())
					.covCLimit(testData.getCovCLimit())
					.build());

			pc.addModifiersDetails();

			pc.selectRiskAnalysis(RiskAnalysis.builder(RiskAnalysisType.UW_ISSUE)
					.uWIssueType(testData.getUwIssueType())
					.longDescription(testData.getDescription())
					.build());

			pc.reviewPolicy(PolicyReview.builder(HomeOwnersConstants.PolicyReviewType.NONE).build());
			pc.viewQuote(Quote.builder().build());
			pc.viewForms(Quote.builder().build());
			pc.selectPayments(Payments.builder().build());
			pc.issuepolicy(HomeOwnersConstants.Transactions.BIND_ONLY);
			pc.approveUWissue(UWIssueType.builder()
					.IssueType(testData.getUwIssueType())
					.build());

			pc.issuepolicy(HomeOwnersConstants.Transactions.SUBMISSION);
			pc.viewPolicy();

			Log.testCaseResult(driver);

		} catch (Exception e) {
			Log.exception(e, DriverManager.getDriver());
		}  finally {
			DriverManager.quitDriver(driver);
			Log.endTestCase();
		}
	}

	/**
	 * @author surendar.baskaran
	 * @param browser
	 * @throws Exception
	 */
	@Test(description = "Verify Spectrum integration for Homeowners policy", dataProviderClass = DataProviderUtils.class, dataProvider = "parallelTestDataProvider")
	public void TC271(String browser) throws Exception {

		DriverManager.setDriver(browser);
		WebDriver driver = DriverManager.getDriver();
		Log.testCaseInfo("Verify Spectrum integration for Homeowners policy",driver);
		HomeOwnersDataEngine testData = new HomeOwnersDataEngine("GWTestData_DataEngine.xlsx", "HomeOwners", "TC271");

		try {	

			HomeOwnersStepsImpl pc = HomeOwnersSteps.create();

			pc.loginIntoTheApplication("su", "gw");


			pc.searchAccount(EnterAccountInformation.builder()
					.firstName(testData.getFirstName())
					.lastName(testData.getLastName()).build());

			pc.createAccount(CreateNewAccountFromPerson.builder()
					.firstName(testData.getFirstName())
					.lastName(testData.getLastName())
					.addressLine1(testData.getAddressLine1())
					.state(testData.getState())
					.city(testData.getCity())
					.zipCode(testData.getZipcode())
					.addressType(testData.getAddressType())
					.organization(testData.getProducerOrganization())
					.build());

			pc.selectProduct(ProductNames.HOME_OWNERS);

			pc.selectQualifications(Qualification.builder()
					.policyType(testData.getPolicyType())
					.coverageForm(testData.getCoverageForm())
					.dwellingOccupied(testData.getDwellingOccupied())
					.errorMessage(testData.getErrorMessage())
					.build());

			pc.selectQualifications(Qualification.builder()
					.policyType(testData.getPolicyType())
					.coverageForm(testData.getCoverageForm())
					.dwellingOccupied(testData.getDwellingOccupied2())
					.occupyDwellingFullTime(testData.getDwellingFullTime())
					.build());

			pc.updatePolicyInfo(PolicyInfo.builder()
					.policyEffectiveDate(testData.getCurrentDate())
					.policyTerm(testData.getPolicyTerm())
					.build());

			pc.addDwellingDetails(DwellingDetails.builder().fireProtection(testData.getFireProtection()).build());

			pc.addDwellingConstructionDetails(DwellingConstruction.builder()
					.year(testData.getCurrentYear()).build());

			pc.addCoverages(Coverages.builder(HomeOwnersConstants.PolicyType.CONDOMINIUM)
					.coinsurance(testData.getCoInsurance())
					.covCLimit(testData.getCovCLimit())
					.valuationMethod(testData.getValuationMethod())
					.prohibitedUse(testData.getProhibitedUse())
					.lossOfRentalIncome(testData.getRentalIncome())
					.build());

			pc.addModifiersDetails();

			pc.selectRiskAnalysis(RiskAnalysis.builder(RiskAnalysisType.NONE).build());
			pc.reviewPolicy(PolicyReview.builder(HomeOwnersConstants.PolicyReviewType.NONE).build());
			pc.viewQuote(Quote.builder().build());
			pc.viewForms(Quote.builder().build());
			pc.selectPayments(Payments.builder().build());
			pc.issuepolicy(HomeOwnersConstants.Transactions.SUBMISSION);
			pc.viewPolicy();
			pc.verifyChangesInHistoryPage(HistoryDetails.builder()
					.originalValue(testData.getDwellingOccupied())
					.newValue(testData.getDwellingOccupied2())
					.build());

			Log.testCaseResult(driver);

		} catch (Exception e) {
			Log.exception(e, DriverManager.getDriver());
		}  finally {
			DriverManager.quitDriver(driver);
			Log.endTestCase();
		}
	}

	/**
	 * @author somasundaram.muthu
	 * @param browser
	 * @throws Exception
	 */
	@Test(description="Verify whether user able to Quote and Issue when Additional Interests - First Mortgagee, LandLord,  Leasing Company for Rental policy", dataProviderClass = DataProviderUtils.class, dataProvider = "parallelTestDataProvider")
	public void TC114(String browser) throws Exception {

		DriverManager.setDriver(browser);
		WebDriver driver = DriverManager.getDriver();
		Log.testCaseInfo("Verify whether user able to Quote and Issue when Additional Interests - First Mortgagee, LandLord,  Leasing Company for Rental policy",driver);
		HomeOwnersDataEngine testData = new HomeOwnersDataEngine("GWTestData_DataEngine.xlsx", "HomeOwners", "TC114");

		try {	

			HomeOwnersStepsImpl pc = HomeOwnersSteps.create();

			pc.loginIntoTheApplication("su", "gw");

			pc.searchAccount(EnterAccountInformation.builder()
					.firstName(testData.getFirstName())
					.lastName(testData.getLastName()).build());

			pc.createAccount(CreateNewAccountFromPerson.builder()
					.firstName(testData.getFirstName())
					.lastName(testData.getLastName())
					.addressLine1(testData.getAddressLine1())
					.state(testData.getState())
					.city(testData.getCity())
					.zipCode(testData.getZipcode())
					.addressType(testData.getAddressType())
					.organization(testData.getProducerOrganization())
					.build());

			pc.selectProduct(ProductNames.HOME_OWNERS);


			pc.selectQualifications(Qualification.builder()
					.policyType(testData.getPolicyType())
					.coverageForm(testData.getCoverageForm())
					.dwellingOccupied(testData.getDwellingOccupied())
					.occupyDwellingFullTime(testData.getDwellingFullTime())
					.build());


			pc.updatePolicyInfo(PolicyInfo.builder()
					.policyEffectiveDate(testData.getCurrentDate())
					.policyTerm(testData.getPolicyTerm())
					.build());

			pc.addDwellingDetails(DwellingDetails.builder()
					.fireProtection(testData.getFireProtection())
					.addAdditionalInterest(true)
					.createInterest(AdditionalInterestFromPerson.builder()
							.interestType(InterestType.FIRST_MORTGAGE)
							.firstName(testData.getFirstName())
							.lastName(testData.getLastName())
							.addressLine1(testData.getAddressLine1())
							.state(testData.getState())
							.city(testData.getCity())
							.zipCode(testData.getZipcode())
							.addressType(testData.getAddressType()).build())
					.createInterest(AdditionalInterestFromPerson.builder()
							.interestType(InterestType.LANDLORD)
							.firstName(testData.getFirstName())
							.lastName(testData.getLastName())
							.addressLine1(testData.getAddressLine1())
							.state(testData.getState())
							.city(testData.getCity())
							.zipCode(testData.getZipcode())
							.addressType(testData.getAddressType()).build())
					.createInterest(AdditionalInterestFromPerson.builder()
							.interestType(InterestType.LEASING_COMPANY)
							.firstName(testData.getFirstName())
							.lastName(testData.getLastName())
							.addressLine1(testData.getAddressLine1())
							.state(testData.getState())
							.city(testData.getCity())
							.zipCode(testData.getZipcode())
							.addressType(testData.getAddressType()).build())
					.build());

			pc.addDwellingConstructionDetails(DwellingConstruction.builder()
					.year(testData.getCurrentYear()).build());

			pc.addCoverages(Coverages.builder(HomeOwnersConstants.PolicyType.RENTAL)
					.prohibitedUse(testData.getProhibitedUse())
					.valuationMethod(testData.getValuationMethod())
					.covCLimit(testData.getCovCLimit())
					.build());

			pc.addModifiersDetails();

			pc.selectRiskAnalysis(RiskAnalysis.builder(RiskAnalysisType.NONE).build());
			pc.reviewPolicy(PolicyReview.builder(HomeOwnersConstants.PolicyReviewType.NONE).build());
			pc.viewQuote(Quote.builder().build());
			pc.viewForms(Quote.builder().build());
			pc.selectPayments(Payments.builder().build());
			pc.issuepolicy(HomeOwnersConstants.Transactions.SUBMISSION);
			pc.viewPolicy();

			Log.testCaseResult(driver);

		} catch (Exception e) {
			Log.exception(e, DriverManager.getDriver());
		}  finally {
			DriverManager.quitDriver(driver);
			Log.endTestCase();
		}
	}

	/**
	 * @author somasundaram.muthu
	 * @param browser
	 * @throws Exception
	 */
	@Test(description="Verify whether user able to Quote and Issue when Additional Insured HO Association,Leasing Company,Student for Rental policy", dataProviderClass = DataProviderUtils.class, dataProvider = "parallelTestDataProvider")
	public void TC115(String browser) throws Exception {

		DriverManager.setDriver(browser);
		WebDriver driver = DriverManager.getDriver();
		Log.testCaseInfo("Verify whether user able to Quote and Issue when Additional Insured HO Association,Leasing Company,Student for Rental policy",driver);
		HomeOwnersDataEngine testData = new HomeOwnersDataEngine("GWTestData_DataEngine.xlsx", "HomeOwners", "TC115");

		try {	

			HomeOwnersStepsImpl pc = HomeOwnersSteps.create();

			pc.loginIntoTheApplication("su", "gw");

			pc.searchAccount(EnterAccountInformation.builder()
					.firstName(testData.getFirstName())
					.lastName(testData.getLastName()).build());

			pc.createAccount(CreateNewAccountFromPerson.builder()
					.firstName(testData.getFirstName())
					.lastName(testData.getLastName())
					.addressLine1(testData.getAddressLine1())
					.state(testData.getState())
					.city(testData.getCity())
					.zipCode(testData.getZipcode())
					.addressType(testData.getAddressType())
					.organization(testData.getProducerOrganization())
					.build());

			pc.selectProduct(ProductNames.HOME_OWNERS);


			pc.selectQualifications(Qualification.builder()
					.policyType(testData.getPolicyType())
					.coverageForm(testData.getCoverageForm())
					.dwellingOccupied(testData.getDwellingOccupied())
					.occupyDwellingFullTime(testData.getDwellingFullTime())
					.build());


			pc.updatePolicyInfo(PolicyInfo.builder()
					.policyEffectiveDate(testData.getCurrentDate())
					.policyTerm(testData.getPolicyTerm())
					.build());

			pc.addDwellingDetails(DwellingDetails.builder()
					.fireProtection(testData.getFireProtection())
					.addAdditionalInsured(true)
					.createInsured(CreateNewAccountFromPerson.builder()
							.addAdditionalInsured(true)
							.insuredType(InsuredType.LANDLORD)
							.firstName(testData.getFirstName())
							.lastName(testData.getLastName())
							.addressLine1(testData.getAddressLine1())
							.state(testData.getState())
							.city(testData.getCity())
							.zipCode(testData.getZipcode())
							.addressType(testData.getAddressType()).build()).build());

			pc.addDwellingDetails(DwellingDetails.builder()
					.fireProtection(testData.getFireProtection())
					.addAdditionalInsured(true)
					.createInsured(CreateNewAccountFromPerson.builder()
							.addAdditionalInsured(true)
							.insuredType(InsuredType.LEASING_COMPANY)
							.firstName(testData.getFirstName())
							.lastName(testData.getLastName())
							.addressLine1(testData.getAddressLine1())
							.state(testData.getState())
							.city(testData.getCity())
							.zipCode(testData.getZipcode())
							.addressType(testData.getAddressType()).build()).build());
			pc.addDwellingDetails(DwellingDetails.builder()
					.fireProtection(testData.getFireProtection())
					.addAdditionalInsured(true)
					.createInsured(CreateNewAccountFromPerson.builder()
							.addAdditionalInsured(true)
							.insuredType(InsuredType.STUDENT)
							.firstName(testData.getFirstName())
							.lastName(testData.getLastName())
							.addressLine1(testData.getAddressLine1())
							.state(testData.getState())
							.city(testData.getCity())
							.zipCode(testData.getZipcode())
							.schoolName(testData.getDescription())
							.addressType(testData.getAddressType()).build()).build());

			pc.addDwellingConstructionDetails(DwellingConstruction.builder()
					.year(testData.getCurrentYear()).build());

			pc.addCoverages(Coverages.builder(HomeOwnersConstants.PolicyType.RENTAL)
					.prohibitedUse(testData.getProhibitedUse())
					.valuationMethod(testData.getValuationMethod())
					.covCLimit(testData.getCovCLimit())
					.build());

			pc.addModifiersDetails();

			pc.selectRiskAnalysis(RiskAnalysis.builder(RiskAnalysisType.NONE).build());
			pc.reviewPolicy(PolicyReview.builder(HomeOwnersConstants.PolicyReviewType.NONE).build());
			pc.viewQuote(Quote.builder().build());
			pc.viewForms(Quote.builder().build());
			pc.selectPayments(Payments.builder().build());
			pc.issuepolicy(HomeOwnersConstants.Transactions.SUBMISSION);
			pc.viewPolicy();

			Log.testCaseResult(driver);

		} catch (Exception e) {
			Log.exception(e, DriverManager.getDriver());
		}  finally {
			DriverManager.quitDriver(driver);
			Log.endTestCase();
		}
	}

	/**
	 * @author somasundaram.muthu
	 * @param browser
	 * @throws Exception
	 */
	@Test(description = "Verify whether user able to Quote and Issue the Homeowners - Dwelling Policy - Out of Sequence transaction", dataProviderClass = DataProviderUtils.class, dataProvider = "parallelTestDataProvider")
	public void TC64(String browser) throws Exception {

		DriverManager.setDriver(browser);
		WebDriver driver = DriverManager.getDriver();
		Log.testCaseInfo("Verify whether user able to Quote and Issue the Homeowners - Dwelling Policy - Out of Sequence transaction",driver);
		HomeOwnersDataEngine testData = new HomeOwnersDataEngine("GWTestData_DataEngine.xlsx", "HomeOwners", "TC64");

		try {	

			HomeOwnersStepsImpl pc = HomeOwnersSteps.create();

			pc.loginIntoTheApplication("su", "gw");

			//Get policy number from Excel sheet which is generated by data generator using auto generated policy number created copy submission 

			pc.searchPolicyNumber(PolicyDetails.builder().policyNumber(testData.getPolicyNumber()).build());

			pc.copySubmissions();

			pc.viewPolicy();

			pc.policyChange(PolicyChange.builder()
					.date(testData.getDateOneMonthAhead())
					.build());

			pc.updatePolicyInfo(PolicyInfo.builder()
					.build());
			pc.addDwellingDetails(DwellingDetails.builder().fireProtection(testData.getFireProtection()).build());
			pc.addDwellingConstructionDetails(DwellingConstruction.builder()
					.build());
			pc.addCoverages(Coverages.builder(HomeOwnersConstants.PolicyType.NONE).build());
			pc.addModifiersDetails();
			pc.selectRiskAnalysis(RiskAnalysis.builder(RiskAnalysisType.NONE).build());
			pc.reviewPolicy(PolicyReview.builder(HomeOwnersConstants.PolicyReviewType.NONE).build());
			pc.viewQuote(Quote.builder().build());
			pc.viewForms(Quote.builder().build());
			pc.selectPayments(Payments.builder().build());
			pc.issuepolicy(HomeOwnersConstants.Transactions.POLICY_CHANGE);
			pc.viewPolicy();		

			pc.policyChange(PolicyChange.builder()
					.date(testData.getCurrentDate())
					.build());
			pc.verifyOutOfSequenceMessage(PolicyChange.builder()
					.date(testData.getDateOneMonthAhead()).build());

			pc.updatePolicyInfo(PolicyInfo.builder()
					.build());
			pc.verifyOutOfSequenceMessage(PolicyChange.builder()
					.date(testData.getDateOneMonthAhead()).build());
			pc.addDwellingDetails(DwellingDetails.builder().fireProtection(testData.getFireProtection2()).build());
			pc.verifyOutOfSequenceMessage(PolicyChange.builder()
					.date(testData.getDateOneMonthAhead()).build());
			pc.addDwellingConstructionDetails(DwellingConstruction.builder()
					.build());
			pc.verifyOutOfSequenceMessage(PolicyChange.builder()
					.date(testData.getDateOneMonthAhead()).build());
			pc.addCoverages(Coverages.builder(HomeOwnersConstants.PolicyType.NONE).build());
			pc.verifyOutOfSequenceMessage(PolicyChange.builder()
					.date(testData.getDateOneMonthAhead()).build());
			pc.addModifiersDetails();
			pc.verifyOutOfSequenceMessage(PolicyChange.builder()
					.date(testData.getDateOneMonthAhead()).build());
			pc.selectRiskAnalysis(RiskAnalysis.builder(RiskAnalysisType.NONE).build());
			pc.verifyOutOfSequenceMessage(PolicyChange.builder()
					.date(testData.getDateOneMonthAhead()).build());
			pc.reviewPolicy(PolicyReview.builder(HomeOwnersConstants.PolicyReviewType.OUT_OF_SEQUENCE).build());
			pc.verifyOutOfSequenceMessage(PolicyChange.builder()
					.date(testData.getDateOneMonthAhead()).build());
			pc.viewQuote(Quote.builder().build());
			pc.viewForms(Quote.builder().build());
			pc.verifyOutOfSequenceMessage(PolicyChange.builder()
					.date(testData.getDateOneMonthAhead()).build());
			pc.selectPayments(Payments.builder().build());
			pc.verifyOutOfSequenceMessage(PolicyChange.builder()
					.date(testData.getDateOneMonthAhead()).build());
			pc.issuepolicy(HomeOwnersConstants.Transactions.POLICY_CHANGE);
			pc.viewPolicy();		

			Log.testCaseResult(driver);

		} catch (Exception e) {
			Log.exception(e, DriverManager.getDriver());

		}  finally {
			DriverManager.quitDriver(driver);
			Log.endTestCase();
		}
	}

	/**
	 * @author charu.anbarasan
	 * @param browser
	 * @throws Exception
	 */
	@Test(description="Verify whether user able to Quote and Issue - Out of Sequence transaction for rental policy.", dataProviderClass = DataProviderUtils.class, dataProvider = "parallelTestDataProvider")
	public void TC110(String browser) throws Exception {

		DriverManager.setDriver(browser);
		WebDriver driver = DriverManager.getDriver();
		Log.testCaseInfo("Verify whether user able to Quote and Issue - Out of Sequence transaction for rental policy.",driver);
		HomeOwnersDataEngine testData = new HomeOwnersDataEngine("GWTestData_DataEngine.xlsx", "HomeOwners", "TC110");

		try {	

			HomeOwnersStepsImpl pc = HomeOwnersSteps.create();

			pc.loginIntoTheApplication("su", "gw");

			//Get policy number from Excel sheet which is generated by data generator using auto generated policy number created copy submission 

			pc.searchPolicyNumber(PolicyDetails.builder().policyNumber(testData.getPolicyNumber()).build());

			pc.copySubmissions();

			pc.viewPolicy();

			pc.policyChange(PolicyChange.builder()
					.date(testData.getDateOneMonthAhead())
					.build());

			pc.updatePolicyInfo(PolicyInfo.builder()
					.build());
			pc.addDwellingDetails(DwellingDetails.builder().fireProtection(testData.getFireProtection2()).build());
			pc.addDwellingConstructionDetails(DwellingConstruction.builder()
					.build());
			pc.addCoverages(Coverages.builder(HomeOwnersConstants.PolicyType.NONE).build());
			pc.addModifiersDetails();
			pc.selectRiskAnalysis(RiskAnalysis.builder(RiskAnalysisType.NONE).build());
			pc.reviewPolicy(PolicyReview.builder(HomeOwnersConstants.PolicyReviewType.NONE).build());
			pc.viewQuote(Quote.builder().build());
			pc.viewForms(Quote.builder().build());
			pc.selectPayments(Payments.builder().build());
			pc.issuepolicy(HomeOwnersConstants.Transactions.POLICY_CHANGE);
			pc.viewPolicy();		

			pc.policyChange(PolicyChange.builder()
					.date(testData.getCurrentDate())
					.build());
			pc.verifyOutOfSequenceMessage(PolicyChange.builder()
					.date(testData.getDateOneMonthAhead()).build());

			pc.updatePolicyInfo(PolicyInfo.builder()
					.build());
			pc.verifyOutOfSequenceMessage(PolicyChange.builder()
					.date(testData.getDateOneMonthAhead()).build());
			pc.addDwellingDetails(DwellingDetails.builder().fireProtection(testData.getPolicyTerm2()).build());
			pc.verifyOutOfSequenceMessage(PolicyChange.builder()
					.date(testData.getDateOneMonthAhead()).build());
			pc.addDwellingConstructionDetails(DwellingConstruction.builder()
					.build());
			pc.verifyOutOfSequenceMessage(PolicyChange.builder()
					.date(testData.getDateOneMonthAhead()).build());
			pc.addCoverages(Coverages.builder(HomeOwnersConstants.PolicyType.NONE).build());
			pc.verifyOutOfSequenceMessage(PolicyChange.builder()
					.date(testData.getDateOneMonthAhead()).build());
			pc.addModifiersDetails();
			pc.verifyOutOfSequenceMessage(PolicyChange.builder()
					.date(testData.getDateOneMonthAhead()).build());
			pc.selectRiskAnalysis(RiskAnalysis.builder(RiskAnalysisType.NONE).build());
			pc.verifyOutOfSequenceMessage(PolicyChange.builder()
					.date(testData.getDateOneMonthAhead()).build());
			pc.reviewPolicy(PolicyReview.builder(HomeOwnersConstants.PolicyReviewType.OUT_OF_SEQUENCE).build());
			pc.verifyOutOfSequenceMessage(PolicyChange.builder()
					.date(testData.getDateOneMonthAhead()).build());
			pc.viewQuote(Quote.builder().build());
			pc.viewForms(Quote.builder().build());
			pc.verifyOutOfSequenceMessage(PolicyChange.builder()
					.date(testData.getDateOneMonthAhead()).build());
			pc.selectPayments(Payments.builder().build());
			pc.verifyOutOfSequenceMessage(PolicyChange.builder()
					.date(testData.getDateOneMonthAhead()).build());
			pc.issuepolicy(HomeOwnersConstants.Transactions.POLICY_CHANGE);
			pc.viewPolicy();		

			Log.testCaseResult(driver);


		} catch (Exception e) {
			Log.exception(e, DriverManager.getDriver());
		}  finally {

			DriverManager.quitDriver(driver);
			Log.endTestCase();
		}
	}

	/**
	 * @author vignesh.ravi
	 * @param browser
	 * @throws Exception
	 */
	@Test(description = "Verify the Response changes in history page.", dataProviderClass = DataProviderUtils.class, dataProvider = "parallelTestDataProvider")
	public void TC272(String browser) throws Exception {

		DriverManager.setDriver(browser);
		WebDriver driver = DriverManager.getDriver();
		Log.testCaseInfo("Verify the Response changes in history page.",driver);
		HomeOwnersDataEngine testData = new HomeOwnersDataEngine("GWTestData_DataEngine.xlsx", "HomeOwners", "TC272");

		try {	

			HomeOwnersStepsImpl pc = HomeOwnersSteps.create();

			pc.loginIntoTheApplication("su", "gw");


			pc.searchAccount(EnterAccountInformation.builder()
					.firstName(testData.getFirstName())
					.lastName(testData.getLastName()).build());

			pc.createAccount(CreateNewAccountFromPerson.builder()
					.firstName(testData.getFirstName())
					.lastName(testData.getLastName())
					.addressLine1(testData.getAddressLine1())
					.state(testData.getState())
					.city(testData.getCity())
					.zipCode(testData.getZipcode())
					.addressType(testData.getAddressType())
					.organization(testData.getProducerOrganization())
					.build());

			pc.selectProduct(ProductNames.HOME_OWNERS);

			pc.selectQualifications(Qualification.builder()
					.policyType(testData.getPolicyType())
					.coverageForm(testData.getCoverageForm())
					.dwellingOccupied(testData.getDwellingOccupied())
					.errorMessage(testData.getErrorMessage())
					.build());

			pc.selectQualifications(Qualification.builder()
					.policyType(testData.getPolicyType())
					.coverageForm(testData.getCoverageForm())
					.dwellingOccupied(testData.getDwellingOccupied2())
					.occupyDwellingFullTime(testData.getDwellingFullTime())
					.build());

			pc.updatePolicyInfo(PolicyInfo.builder()
					.policyEffectiveDate(testData.getCurrentDate())
					.policyTerm(testData.getPolicyTerm())
					.build());

			pc.addDwellingDetails(DwellingDetails.builder().fireProtection(testData.getFireProtection()).build());

			pc.addDwellingConstructionDetails(DwellingConstruction.builder()
					.year(testData.getCurrentYear()).build());

			pc.addCoverages(Coverages.builder(HomeOwnersConstants.PolicyType.CONDOMINIUM)
					.coinsurance(testData.getCoInsurance())
					.covCLimit(testData.getCovCLimit())
					.valuationMethod(testData.getValuationMethod())
					.prohibitedUse(testData.getProhibitedUse())
					.lossOfRentalIncome(testData.getRentalIncome())
					.build());

			pc.addModifiersDetails();

			pc.selectRiskAnalysis(RiskAnalysis.builder(RiskAnalysisType.NONE).build());
			pc.reviewPolicy(PolicyReview.builder(HomeOwnersConstants.PolicyReviewType.NONE).build());
			pc.viewQuote(Quote.builder().build());
			pc.viewForms(Quote.builder().build());
			pc.issuepolicy(HomeOwnersConstants.Transactions.SUBMISSION);
			pc.viewPolicy();
			pc.verifyChangesInHistoryPage(HistoryDetails.builder()
					.originalValue(testData.getDwellingOccupied())
					.newValue(testData.getDwellingOccupied2())
					.build());

			Log.testCaseResult(driver);

		} catch (Exception e) {
			Log.exception(e, DriverManager.getDriver());
		}  finally {
			DriverManager.quitDriver(driver);
			Log.endTestCase();
		}
	}

	/**
	 * @author somasundaram.muthu
	 * @param browser
	 * @throws Exception
	 */
	@Test(description ="Verify whether user able to Quote and Issue when prior policy and claims are added in the Homeowners Policy", dataProviderClass = DataProviderUtils.class, dataProvider = "parallelTestDataProvider")
	public void TC38(String browser) throws Exception {

		DriverManager.setDriver(browser);
		WebDriver driver = DriverManager.getDriver();
		Log.testCaseInfo("Verify whether user able to Quote and Issue when prior policy and claims are added in the Homeowners Policy",driver);
		HomeOwnersDataEngine testData = new HomeOwnersDataEngine("GWTestData_DataEngine.xlsx", "HomeOwners", "TC38");

		try {	

			HomeOwnersStepsImpl pc = HomeOwnersSteps.create();

			pc.loginIntoTheApplication("su", "gw");

			pc.searchAccount(EnterAccountInformation.builder()
					.firstName(testData.getFirstName())
					.lastName(testData.getLastName()).build());

			pc.createAccount(CreateNewAccountFromPerson.builder()
					.firstName(testData.getFirstName())
					.lastName(testData.getLastName())
					.addressLine1(testData.getAddressLine1())
					.state(testData.getState())
					.city(testData.getCity())
					.zipCode(testData.getZipcode())
					.addressType(testData.getAddressType())
					.organization(testData.getProducerOrganization())
					.build());

			pc.selectProduct(ProductNames.HOME_OWNERS);

			pc.selectQualifications(Qualification.builder()

					.policyType(testData.getPolicyType())
					.coverageForm(testData.getCoverageForm())
					.dwellingOccupied(testData.getDwellingOccupied())
					.occupyDwellingFullTime(testData.getDwellingFullTime())
					.build());

			pc.updatePolicyInfo(PolicyInfo.builder()
					.policyEffectiveDate(testData.getCurrentDate())
					.policyTerm(testData.getPolicyTerm())
					.build());

			pc.addDwellingDetails(DwellingDetails.builder().fireProtection(testData.getFireProtection()).build());

			pc.addDwellingConstructionDetails(DwellingConstruction.builder()
					.year(testData.getCurrentYear()).build());

			pc.addCoverages(Coverages.builder(HomeOwnersConstants.PolicyType.DWELLING)
					.coinsurance(testData.getCoInsurance())
					.prohibitedUse(testData.getProhibitedUse())
					.lossOfRentalIncome(testData.getRentalIncome())
					.build());

			pc.addModifiersDetails();

			pc.selectRiskAnalysis(RiskAnalysis.builder(RiskAnalysisType.PRIOR_POLICIES)
					.carrier(testData.getCarrier())
					.policyNo(testData.getPolicyNumber())
					.effectiveDate(testData.getCurrentDate())
					.expirationDate(testData.getCurrentDate())
					.annualPremium(DataFakers.generateNumerics("AnnualPremium"))
					.losses(DataFakers.generateNumerics("Losses"))
					.totalLosses(DataFakers.generateNumerics("TotalLosses")).build());

			pc.reviewPolicy(PolicyReview.builder(HomeOwnersConstants.PolicyReviewType.NONE).build());
			pc.viewQuote(Quote.builder().build());
			pc.viewForms(Quote.builder().build());
			pc.selectPayments(Payments.builder().build());
			pc.issuepolicy(HomeOwnersConstants.Transactions.SUBMISSION);
			pc.viewPolicy();
			Log.testCaseResult(driver);

		} catch (Exception e) {
			Log.exception(e, DriverManager.getDriver());
		}  finally {
			DriverManager.quitDriver(driver);
			Log.endTestCase();
		}
	}

	/**
	 * @author vignesh.ravi
	 * @param browser
	 * @throws Exception
	 */
	@Test(description = "Create a document from on-demand for home policy", dataProviderClass = DataProviderUtils.class, dataProvider = "parallelTestDataProvider")
	public void TC267(String browser) throws Exception {

		DriverManager.setDriver(browser);
		WebDriver driver = DriverManager.getDriver();
		Log.testCaseInfo("Create a document from on-demand for home policy",driver);
		HomeOwnersDataEngine testData = new HomeOwnersDataEngine("GWTestData_DataEngine.xlsx", "HomeOwners", "TC267");

		try {	

			HomeOwnersStepsImpl pc = HomeOwnersSteps.create();

			pc.loginIntoTheApplication("su", "gw");


			pc.searchAccount(EnterAccountInformation.builder()
					.firstName(testData.getFirstName())
					.lastName(testData.getLastName()).build());

			pc.createAccount(CreateNewAccountFromPerson.builder()
					.firstName(testData.getFirstName())
					.lastName(testData.getLastName())
					.addressLine1(testData.getAddressLine1())
					.state(testData.getState())
					.city(testData.getCity())
					.zipCode(testData.getZipcode())
					.addressType(testData.getAddressType())
					.organization(testData.getProducerOrganization())
					.build());

			pc.selectProduct(ProductNames.HOME_OWNERS);


			pc.selectQualifications(Qualification.builder()
					.policyType(testData.getPolicyType())
					.coverageForm(testData.getCoverageForm())
					.dwellingOccupied(testData.getDwellingOccupied())
					.occupyDwellingFullTime(testData.getDwellingFullTime())
					.build());

			pc.updatePolicyInfo(PolicyInfo.builder()
					.policyEffectiveDate(testData.getCurrentDate())
					.policyTerm(testData.getPolicyTerm())
					.policyExpirationDate(testData.getDateSixMonthAhead())
					.build());

			pc.addDwellingDetails(DwellingDetails.builder().fireProtection(testData.getFireProtection()).build());

			pc.addDwellingConstructionDetails(DwellingConstruction.builder()
					.year(testData.getCurrentYear()).build());

			pc.addCoverages(Coverages.builder(HomeOwnersConstants.PolicyType.CONDOMINIUM)
					.coinsurance(testData.getCoInsurance())
					.covCLimit(testData.getCovCLimit())
					.valuationMethod(testData.getValuationMethod())
					.prohibitedUse(testData.getProhibitedUse())
					.lossOfRentalIncome(testData.getRentalIncome())
					.build());

			pc.addModifiersDetails();

			pc.selectRiskAnalysis(RiskAnalysis.builder(RiskAnalysisType.NONE).build());
			pc.reviewPolicy(PolicyReview.builder(HomeOwnersConstants.PolicyReviewType.NONE).build());
			pc.viewQuote(Quote.builder().build());
			pc.viewForms(Quote.builder().build());
			pc.issuepolicy(HomeOwnersConstants.Transactions.SUBMISSION);
			pc.viewPolicy();	
			String templateCreation = pc.templateCreation(CreateEmail.builder()
					.documentType(testData.getDocumentType())
					.emailBody(testData.getEmailBody())
					.emailSubject(testData.getEmailMessage())
					.build());
			pc.verifyDocumentIsCreated(templateCreation);

			Log.testCaseResult(driver);

		} catch (Exception e) {
			Log.exception(e, DriverManager.getDriver());
		}  finally {
			DriverManager.quitDriver(driver);
			Log.endTestCase();
		}
	}

	/**
	 * @author vignesh.ravi
	 * @param browser
	 * @throws Exception
	 */
	@Test(description = "Validate whether all the Coverages are displayed in Ratings sheet which is added in the 'Coverages' screen in Homeowners Policy", dataProviderClass = DataProviderUtils.class, dataProvider = "parallelTestDataProvider")
	public void TC42(String browser) throws Exception {

		DriverManager.setDriver(browser);
		WebDriver driver = DriverManager.getDriver();
		Log.testCaseInfo("Validate whether all the Coverages are displayed in Ratings sheet which is added in the 'Coverages' screen in Homeowners Policy",driver);
		HomeOwnersDataEngine testData = new HomeOwnersDataEngine("GWTestData_DataEngine.xlsx", "HomeOwners", "TC42");

		try {	

			HomeOwnersStepsImpl pc = HomeOwnersSteps.create();

			pc.loginIntoTheApplication("su", "gw");


			pc.searchAccount(EnterAccountInformation.builder()
					.firstName(testData.getFirstName())
					.lastName(testData.getLastName()).build());

			pc.createAccount(CreateNewAccountFromPerson.builder()
					.firstName(testData.getFirstName())
					.lastName(testData.getLastName())
					.addressLine1(testData.getAddressLine1())
					.state(testData.getState())
					.city(testData.getCity())
					.zipCode(testData.getZipcode())
					.addressType(testData.getAddressType())
					.organization(testData.getProducerOrganization())
					.build());

			pc.selectProduct(ProductNames.HOME_OWNERS);


			pc.selectQualifications(Qualification.builder()
					.policyType(testData.getPolicyType())
					.coverageForm(testData.getCoverageForm())
					.dwellingOccupied(testData.getDwellingOccupied())
					.occupyDwellingFullTime(testData.getDwellingFullTime())
					.build());

			pc.updatePolicyInfo(PolicyInfo.builder()
					.policyEffectiveDate(testData.getCurrentDate())
					.policyTerm(testData.getPolicyTerm())
					.policyExpirationDate(testData.getDateSixMonthAhead())
					.build());

			pc.addDwellingDetails(DwellingDetails.builder().fireProtection(testData.getFireProtection()).build());

			pc.addDwellingConstructionDetails(DwellingConstruction.builder()
					.year(testData.getCurrentYear()).build());

			pc.addCoverages(Coverages.builder(HomeOwnersConstants.PolicyType.CONDOMINIUM)
					.coinsurance(testData.getCoInsurance())
					.covCLimit(testData.getCovCLimit())
					.valuationMethod(testData.getValuationMethod())
					.prohibitedUse(testData.getProhibitedUse())
					.lossOfRentalIncome(testData.getRentalIncome())
					.build());

			pc.addModifiersDetails();

			pc.selectRiskAnalysis(RiskAnalysis.builder(RiskAnalysisType.NONE).build());
			pc.reviewPolicy(PolicyReview.builder(HomeOwnersConstants.PolicyReviewType.NONE).build());
			String effectiveDate = pc.getEffectiveDate();
			String expirationDate = pc.getExpirationDate();
			pc.viewShowRating(Rating.builder()
					.effectiveDate(effectiveDate)
					.expirationDate(expirationDate)
					.showRatingWorksheet(true)
					.factorVal(testData.getFactorialVal())
					.limit(testData.getLimit())
					.fileName(testData.getFileName())
					.value(testData.getValue())
					.state(testData.getCarrier())
					.coverage1(testData.getCoverage1())
					.coverage2(testData.getCoverage2())
					.coverage3(testData.getCoverage3())
					.coverage4(testData.getCoverage4())
					.build());

			Log.testCaseResult(driver);

		} catch (Exception e) {
			Log.exception(e, DriverManager.getDriver());
		}  finally {
			DriverManager.quitDriver(driver);
			Log.endTestCase();
		}
	}

	/**
	 * @author vignesh.ravi
	 * @param browser
	 * @throws Exception
	 */
	@Test(description = "Verify Inference Logic Form Pattern: HOP 06 00 for condo policy.", dataProviderClass = DataProviderUtils.class, dataProvider = "parallelTestDataProvider")
	public void TC268(String browser) throws Exception {

		DriverManager.setDriver(browser);
		WebDriver driver = DriverManager.getDriver();
		Log.testCaseInfo("Verify Inference Logic Form Pattern: HOP 06 00 for condo policy.",driver);
		HomeOwnersDataEngine testData = new HomeOwnersDataEngine("GWTestData_DataEngine.xlsx", "HomeOwners", "TC268");

		try {	

			HomeOwnersStepsImpl pc = HomeOwnersSteps.create();

			pc.loginIntoTheApplication("su", "gw");

			//Get policy number from Excel sheet which is generated by data generator using auto generated policy number created copy submission 

			pc.searchPolicyNumber(PolicyDetails.builder().policyNumber(testData.getPolicyNumber()).build());

			pc.copySubmissions();

			pc.viewPolicy();

			pc.verifyFormsCreated(Transactions.SUBMISSION);

			//policy change
			pc.policyChange(PolicyChange.builder().date(testData.getCurrentDate()).build());
			pc.updatePolicyInfo(PolicyInfo.builder()
					.next(true).build());
			pc.addDwellingDetails(DwellingDetails.builder().fireProtection(testData.getFireProtection2()).build());
			pc.addDwellingConstructionDetails(DwellingConstruction.builder().build());
			pc.addCoverages(Coverages.builder(HomeOwnersConstants.PolicyType.NONE).build());
			pc.addModifiersDetails();
			pc.selectRiskAnalysis(RiskAnalysis.builder(RiskAnalysisType.NONE).build());
			pc.reviewPolicy(PolicyReview.builder(HomeOwnersConstants.PolicyReviewType.NONE).build());
			pc.viewQuote(Quote.builder().build());
			pc.viewForms(Quote.builder().build());
			pc.issuepolicy(HomeOwnersConstants.Transactions.POLICY_CHANGE);
			pc.viewPolicy();
			pc.verifyFormsCreated(Transactions.POLICY_CHANGE);

			Log.testCaseResult(driver);

		} catch (Exception e) {
			Log.exception(e, DriverManager.getDriver());
		}  finally {
			DriverManager.quitDriver(driver);
			Log.endTestCase();
		}
	}
}